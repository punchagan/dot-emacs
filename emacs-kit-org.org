#+TITLE: Emacs Kit Org-mode
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:emacs-kit.org][Emacs Kit]].

* Emacs Kit Org
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also *implemented using* Org-mode and [[http://git-scm.com/][git]].

* Loading stuff
#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name
                           "lisp" (expand-file-name
                                   "contrib" (expand-file-name
                                              "org" (expand-file-name
                                                     "elisp" dotfiles-dir)))))
  (require 'org-habit)
#+end_src

* Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c b") 'org-iswitchb)
#+end_src

* Auto mode and hooks
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'turn-on-flyspell)
  (add-hook 'org-mode-hook 'turn-on-font-lock)
#+end_src

* Miscellaneous
#+begin_src emacs-lisp
  (setq org-startup-folded t)
  (setq org-cycle-separator-lines 0) ; leave no empty line in collapsed view
  (setq org-directory "/data/life-in-plain-text/")
  (setq org-default-notes-file (expand-file-name "refile.org" org-directory))
  (setq org-hide-leading-stars t)
  (setq org-odd-levels-only t)
  (setq org-popup-calendar-for-date-prompt nil)
  (setq org-return-follows-link t)
  (setq org-log-done 'time)
  (setq org-insert-heading-respect-content t)
#+end_src

* Add final new line when saving files
#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src 

* save all org buffers every hour
#+begin_src emacs-lisp
  (run-at-time "00:59" 3600 'org-save-all-org-buffers)
#+end_src 

* TODO Stuff
#+begin_src emacs-lisp
  (setq org-todo-keywords 
        (quote (
                (sequence "TODO(t)" "NEXT(n!)" "|" "DONE(d!/!)")
                (sequence "WAITING(w!)" "SOMEDAY(S)" "|" "CANCELLED(c@/!)")
                (sequence "TOREAD(o)" "FOUND(f)" "READING(r)" "|" "DONE(d!/!)" ))))
  
  
  (setq org-todo-keyword-faces 
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("SOMEDAY" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold))))
  
  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src

* Agenda Stuff
*** agenda will always contain all TODO entries.
    #+begin_src emacs-lisp
      (setq org-agenda-include-all-todo t)
    #+end_src 
*** do not include diary entries
    #+begin_src emacs-lisp
      (setq org-agenda-include-diary nil)
    #+end_src
*** Number of days to include in overview display.
    #+begin_src emacs-lisp
      (setq org-agenda-ndays 1)
    #+end_src
*** Custom Agenda Keys
    #+begin_src emacs-lisp
      (setq org-agenda-custom-commands
            (quote (
                    ("r" "Refile New Notes and Tasks" tags "LEVEL=2+REFILE"
                     ((org-agenda-todo-ignore-with-date nil)
                      (org-agenda-todo-ignore-deadlines nil)
                      (org-agenda-todo-ignore-scheduled nil))))))
    #+end_src
*** Jump to org-agenda after Idle time. 
    #+begin_src emacs-lisp
      (defun jump-to-org-agenda ()
        (interactive)
        (let ((buf (get-buffer "*Org Agenda*"))
              wind)
          (if buf
              (if (setq wind (get-buffer-window buf))
                  (select-window wind)
                (if (called-interactively-p)
                    (progn
                      (select-window (display-buffer buf t t))
                      (org-fit-window-to-buffer)
                      ;; (org-agenda-redo)
                      )
                  (with-selected-window (display-buffer buf)
                    (org-fit-window-to-buffer)
                    ;; (org-agenda-redo)
                    )))
            (call-interactively 'org-agenda-list)))
        ;;(let ((buf (get-buffer "*Calendar*")))
        ;;  (unless (get-buffer-window buf)
        ;;    (org-agenda-goto-calendar)))
        )
      
      (run-with-idle-timer 900 t 'jump-to-org-agenda)
    #+end_src
* Refiling
*** from doc.norang
  #+begin_src emacs-lisp
  ; Use IDO for target completion
  (setq org-completion-use-ido t)
  ; Targets include this file and any file contributing to the agenda - up to 5 levels deep
  (setq org-refile-targets (quote ((org-agenda-files :maxlevel . 5) (nil :maxlevel . 5))))
  ; Targets start with the file name - allows creating level 1 tasks
  (setq org-refile-use-outline-path (quote file))
  ; Targets complete in steps so we start with filename, TAB shows the next level of targets etc
  (setq org-outline-path-complete-in-steps t)
  ; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
#+end_src
*** Refile to date-tree
    :PROPERTIES:
    :Post Date: [2010-07-30 Fri 05:33]
    :ID:       o2b:2b577bcd-5fb3-4841-b6d7-abd78ef713b3
    :END:
    Useful to refile notes to the journal file, which is a
    date-tree. I org-refile
    #+begin_src emacs-lisp
      (defun my/org-refile-to-journal ()
        "Refile an entry to journal file's date-tree"
        (interactive)
        (require 'org-datetree)
        (let ((journal "/data/life-in-plain-text/journal.org")
              post-date)
          (setq post-date (or (org-entry-get (point) "TIMESTAMP_IA")
                              (org-entry-get (point) "TIMESTAMP")))
          (setq post-date (nthcdr 3 (parse-time-string post-date)))
          (setq post-date (list (cadr post-date) 
                                (car post-date) 
                                (caddr post-date)))
          (org-cut-subtree)
          (with-current-buffer (or (find-buffer-visiting journal)
                                   (find-file-noselect file))
            (save-excursion
              (org-datetree-file-entry-under (current-kill 0) post-date)
              (bookmark-set "org-refile-last-stored")))
          (message "Refiled to %s" journal)))
      
      (defun my/org-agenda-refile-to-journal ()
        "Refile the item at point to journal."
        (interactive)
        (let* ((marker (or (org-get-at-bol 'org-hd-marker)
                           (org-agenda-error)))
               (buffer (marker-buffer marker))
               (pos (marker-position marker)))
          (with-current-buffer buffer
            (save-excursion
              (save-restriction
                (widen)
                (goto-char marker)
                (org-remove-subtree-entries-from-agenda)
                (my/org-refile-to-journal)))))
        (org-agenda-redo))
      
      (org-defkey org-agenda-mode-map (kbd "C-c C-S-w") 'my/org-agenda-refile-to-journal)
      (org-defkey org-mode-map (kbd "C-c C-S-w") 'my/org-refile-to-journal)
    #+end_src
* Archiving
#+begin_src emacs-lisp
  ;; Donot change status of items when archiving.
  (setq org-archive-mark-done nil)
  ;;
#+end_src

* org-capture stuff
#+begin_src emacs-lisp
  (require 'org-capture)
  (global-set-key (kbd "C-M-r") 'org-capture)
  
  ;; org-protocol
  (require 'org-protocol)
  
  (setq org-capture-templates
        '(("a" "accounts" table-line
           (file+headline "accounts.org" "Expenses")
           "|%^{To/From}|%^{Detail}|%^{Amount}|%u|" :immediate-finish t)
          ("b" "book" entry
           (file+headline "books.org" "Book List")
           "%[/data/life-in-plain-text/template-books]" :immediate-finish t)
          ("c" "contacts" entry
           (file+headline "contacts.org" "Contacts")
           "%[/data/life-in-plain-text/template-contacts]" :immediate-finish t)
          ("n" "note" entry
           (file+headline "refile.org" "Notes")
           "* %^{About} :note: \n\n  %U\n\n  %?")           
          ("t" "task" entry
           (file+headline "refile.org" "Tasks")
           "* TODO %? \n  " :clock-in t :clock-resume t)
          ("x" "org-protocol save relevant links" item
           (clock)
           "[[%:link][%:description]]")
          ("w" "org-protocol bookmarks" entry
           (file+headline "refile.org" "Links")
           "* %:description %^G:\n  %u\n  %:link\n  %i" :immediate-finish t)))
#+end_src
         
* Clocking stuff
*** Misc
#+begin_src emacs-lisp
  ;; Resume clocking tasks when emacs is restarted
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
  (setq org-clock-history-length 28)
  ;; Resume clocking task on clock-in if the clock is open
  (setq org-clock-in-resume t)
  ;; Change task state to STARTED when clocking in
  (setq org-clock-in-switch-to-state (quote bh/clock-in-to-next))
  ;;Resolving idle time
  (setq org-clock-idle-time 5)
  ;; Separate drawers for clocking and logs
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK" "CLOCK")))
  ;; Save clock data in the CLOCK drawer and state changes and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer "CLOCK")
  ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
  (setq org-clock-out-remove-zero-time-clocks t)
  ;; Don't clock out when moving task to a done state
  (setq org-clock-out-when-done nil)
  ;; Disable auto clock resolution
  (setq org-clock-auto-clock-resolution nil)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

*** Removing empty clock drawers on clock out
#+begin_src emacs-lisp
  (defun bh/remove-empty-drawer-on-clock-out ()
    (interactive)
    (save-excursion
      (beginning-of-line 0)
      (org-remove-empty-drawer-at "CLOCK" (point))))
  
  (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)
#+end_src

*** Change task state to NEXT from TODO when clocking in
  #+begin_src emacs-lisp
  (defun bh/clock-in-to-next (kw)
    "Switch task from TODO to NEXT when clocking in.
  Skips remember tasks and tasks with subtasks"
    (if (and (string-equal kw "TODO")
             (not (string-match "^CAPTURE.+org$"(buffer-name) )))
        (let ((subtree-end (save-excursion (org-end-of-subtree t)))
              (has-subtask nil))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-not-done-keywords)
                (setq has-subtask t))))
          (when (not has-subtask)
            "NEXT"))))
  #+end_src 
*** Effort Estimates
***** Column view headings
      #+begin_src emacs-lisp
        (setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
      #+end_src
***** Effort Estimate Global Values
      #+begin_src emacs-lisp
        (setq org-global-properties (quote (("Effort_ALL" . "0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00"))))
      #+end_src
* org-publish
#+begin_src emacs-lisp
;; Exporting & Publishing
(setq org-export-htmlize-output-type 'css)

(require 'org-publish)
(setq org-publish-project-alist
      '(
	("org-notes"
	 :base-directory "~/Worg/"
	 :base-extension "org"
	 :publishing-directory "~/public_html/"
	 :recursive t
	 :publishing-function org-publish-org-to-html
	 :headline-levels 4             ; Just the default for this project.
	 :auto-preamble t
	 )

	("org-static"
	 :base-directory "~/Worg/"
	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
	 :publishing-directory "~/public_html/"
	 :recursive t
	 :publishing-function org-publish-attachment
	 )

	("Worg" :components ("org-notes" "org-static"))

	))
#+end_src

* org-export-generic
#+begin_src emacs-lisp
(require 'org-export-generic)

;; Org to rst export 
(org-set-generic-type
 "restructured-text" 
 '(:file-suffix  ".rst"
   :key-binding  ?R

   :title-prefix              ?=
   :title-format              "%s\n"
   :title-suffix              ?=

   :body-header-section-numbers nil	; t = all, nil = none
   :body-section-header-format  "%s\n"
   :body-section-header-suffix  (?= ?- ?~ 
   				 ?+ ?^)
   :body-section-prefix         "\n"
   :body-section-suffix         "\n"

   :body-list-prefix             "<list>\n\n"
   :body-list-suffix             "</list>\n"
   :body-list-format             "+ %s\n"
   
   :body-number-list-prefix       "\n\n"
   :body-number-list-suffix       "\n"
   :body-number-list-format       "%s\n"
   :body-number-list-leave-number t

;;   :body-line-export-preformated t
;;   :body-line-fixed-prefix       "<pre>\n"
;;   :body-line-fixed-suffix       "\n</pre>\n"
;;   :body-line-fixed-format       "%s\n"

;;   :body-line-format             "%s"
;;   :body-line-wrap               60	; wrap at 60 chars

;;   :body-text-prefix 	       "<p>\n"
;;   :body-text-suffix 	       "</p>\n"
  
   ))

;; #+LaTeX_CLASS: beamer in org files
;; (unless (boundp 'org-export-latex-classes)
;;   (setq org-export-latex-classes nil))

;; (add-to-list 'org-export-latex-classes
;;   ;;beamer class, for presentations
;;   '("beamer"
;;      "\\documentclass[11pt]{beamer}\n
;;       \\mode<{{{beamermode}}}>\n
;;       \\usetheme{{{{beamertheme}}}}\n
;;       \\usecolortheme{{{{beamercolortheme}}}}\n
;;       \\setbeameroption{show notes}\n
;;       \\useoutertheme{infolines}\n
;;       \\setbeamercovered{transparent}\n
;;       \\useoutertheme{infolines}\n
;;       \\usepackage[utf8]{inputenc}\n
;;       \\usepackage[T1]{fontenc}\n
;;       \\usepackage{hyperref}\n
;;       \\usepackage{color}
;;       \\usepackage{listings}
;;       \\lstset{language=Python,
;;         basicstyle=\\ttfamily\\bfseries,
;;         commentstyle=\\color{red}\\itshape,
;;         stringstyle=\\color{darkgreen},
;;         showstringspaces=false,
;;         keywordstyle=\\color{blue}\\bfseries}\n
;;       \\usepackage{verbatim}\n
;;       \\institute{{{{beamerinstitute}}}}\n          
;;        \\subject{{{{beamersubject}}}}\n"

;;      ("\\section{%s}" . "\\section*{%s}")
     
;;      ("\\begin{frame}[fragile]\\frametitle{%s}"
;;        "\\end{frame}"
;;        "\\begin{frame}[fragile]\\frametitle{%s}"
;;        "\\end{frame}")))
#+end_src

* Org git documentation with info
#+begin_src emacs-lisp
  (add-to-list 'Info-default-directory-list (expand-file-name
                                             "doc" (expand-file-name
                                                    "org" (expand-file-name
                                                           "elisp" dotfiles-dir))))
#+end_src
