#+STARTUP: indent
#+TITLE: A literate Emacs configuration
#+DESCRIPTION: This file contains my Emacs init.el configuration as a literate program, which is generated by tangling this document.
#+PROPERTY: header-args :tangle init.el :comments link :results none

* Basic setup for init
** Lexical binding
We set the heading line of the file, to enable lexical
binding. This makes it easier to define variables to use in hooks
that are run later, etc. See [[gc-thresholds][gc-threshold src block]] for example.

#+BEGIN_SRC emacs-lisp :comments none
  ;;; init.el --- Load the full configuration -*- lexical-binding: t -*-
#+END_SRC

** Enable debug if required
Produce backtraces when errors occur: can be helpful to diagnose startup issues
#+BEGIN_SRC emacs-lisp
  ;; (setq debug-on-error t)
#+END_SRC

** Check that Emacs is not too old
#+BEGIN_SRC emacs-lisp
  (let ((minver "25.1"))
    (when (version< emacs-version minver)
      (error "Your Emacs is too old -- this config requires v%s or higher" minver)))

  (when (version< emacs-version "26.1")
    (message "Your Emacs is old, and some functionality in this config will be disabled. Please upgrade if possible."))
#+END_SRC

** Adjust garbage collection thresholds
Allow for a much higher garbage collection threshold during startup,
to prevent gc from slowing down startup.

#+name: gc-thresholds
#+BEGIN_SRC emacs-lisp
  (let ((normal-gc-cons-threshold (* 20 1024 1024))
        (init-gc-cons-threshold (* 128 1024 1024)))
    (setq gc-cons-threshold init-gc-cons-threshold)
    (add-hook 'emacs-startup-hook
              (lambda () (setq gc-cons-threshold normal-gc-cons-threshold))))
#+END_SRC

* ~init.el~ file generation
** The =my/make-init-el= function
   :PROPERTIES:
   :CUSTOM_ID: my-make-init-el-function
   :END:

   We genarate the ~init.el~ file, whenever this file gets saved. We need
   to save with a prefix argument, though. ~C-u C-x C-s~.

   #+name: startup-code
   #+BEGIN_SRC emacs-lisp
     (defun my/make-init-el ()
       "Tangle an init.el my init.org."
       (interactive "P") ;; Places value of universal argument into: current-prefix-arg
       (when current-prefix-arg
         (let* ((time      (current-time))
                (_date     (format-time-string "_%Y-%m-%d"))
                (init-file (expand-file-name  "init.el"
                                              (file-name-directory (buffer-file-name)))))

           ;; Make and load init.el
           (org-babel-tangle)
           (load-file init-file)

           ;; Acknowledgement
           (message "Tangled, compiled, and loaded init.el â€¦ %.06f seconds"
                    (float-time (time-since time))))))

     ;; Added this as a local variable in the org file, otherwise it doesn't work. :)
     ;; (add-hook 'after-save-hook 'my/make-init-el nil 'local-to-this-file-please)
   #+END_SRC

* COMMENT Local Variables
  # Local Variables:
  # eval: (add-hook 'after-save-hook 'my/make-init-el nil 'local-to-this-file-please)
  # End:
