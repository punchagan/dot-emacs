#+STARTUP: indent odd hidestars
* Introduction
This file contains the bulk of my emacs config.  It uses John Wiegley's
wonderful ~use-package~.  Also, this file is loaded in my ~init.el~ using
~org-babel-load-file~.

*** Ensure use-package is available

Everything else tries to use ~use-package~.  So, we try to load it first.

# FIXME: Currently, it is installed using package, and we call
# ~package-initialize~.  This is not the best setup, when moving config to a
# new machine.
#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (require 'use-package)
#+END_SRC

*** Add a register jump to open this file quickly!
#+BEGIN_SRC emacs-lisp
  (set-register ?I '(file . "~/.emacs.d/punchagan.org"))
#+END_SRC
* Load path tweaks
Add additional paths to the load-path.  Currently site-lisp is the only place
where there is additional stuff!

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path site-lisp-dir)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Add top-level lisp directories to the load-path
  (dolist (dir (nreverse
                (list site-lisp-dir)))
    (dolist (entry (nreverse
                    (directory-files-and-attributes site-lisp-dir t "^[^.].+")))
      (add-to-list 'load-path (car entry))))
#+END_SRC

Ideally, nothing should go into the ~custom.el~ file. But, ~org-drill~ dumps in
stuff into it...

#+BEGIN_SRC emacs-lisp
  (setq custom-file
        (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file 'noerror)
#+END_SRC

* Appearance
*** Disable scroll bar, menu bar, fringes, junk...
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (mouse-wheel-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)

  ;; No menubar
  (menu-bar-mode -1)

  ;; No blinking cursor
  (blink-cursor-mode -1)

  ;; make the fringe (gutter) smaller
  ;; the argument is a width in pixels (the default is 8)
  (if (fboundp 'fringe-mode)
      (fringe-mode 1))
#+END_SRC

*** Set frame title based on buffer name
#+BEGIN_SRC emacs-lisp
  ;; more useful frame title, that show either a file or a
  ;; buffer name (if the buffer isn't visiting a file)
  (setq frame-title-format
        '("" invocation-name " - "
          (:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))

  (load-theme 'wombat t)
#+END_SRC

*** Nicer scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)

#+END_SRC

* Startup
*** Don't show startup screen
#+BEGIN_SRC emacs-lisp
  ;; No startup screen
  (setq inhibit-startup-screen t)
#+END_SRC
*** scratch message
Remove the default scratch buffer message.
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message ";;; scratch")
#+END_SRC
*** initial buffer
Display org-agenda when emacs starts-up!

We do this immediately after [[*make agenda the initial buffer][org-agenda keys
have been setup]].
* Setup package.el
#+BEGIN_SRC emacs-lisp
  (require 'package)

  ;; Add repos
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("melpa" . "http://melpa.milkbox.net/packages/")
          ("marmalade" . "http://marmalade-repo.org/packages/")
          ("org" . "http://orgmode.org/elpa/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC

* Hippie expand
Use hippie expand
#+BEGIN_SRC emacs-lisp
  (define-key global-map "\M-/" 'hippie-expand)

  (setq hippie-expand-try-functions-list
        '(try-expand-dabbrev
          try-expand-dabbrev-all-buffers
          try-expand-dabbrev-from-kill
          try-complete-file-name-partially
          try-complete-file-name
          try-expand-all-abbrevs
          try-expand-list
          try-expand-line
          try-complete-lisp-symbol-partially
          try-complete-lisp-symbol))
#+END_SRC

* My defuns
# FIXME: Move the functions to where they are used...
#+BEGIN_SRC emacs-lisp
  (defmacro pc/after (mode &rest body)
    "After MODE loads, evaluate BODY."
    (declare (indent defun))
    `(eval-after-load ,mode
       '(progn ,@body)))

  (defun pc/install (&optional package)
    (unless (ignore-errors (package-install package))
      (el-get-install package)))

  (defun pc/org-time-stamp-change-by-days (time-stamp ndays)
    (format-time-string
     "<%Y-%m-%d %a>"
     (time-add
      (apply 'encode-time (org-parse-time-string time-stamp))
      (days-to-time ndays))))

  (defun pc/org-time-stamp-humanize (time-stamp)
    (format-time-string
     "%A, %e %B %Y, %I:%M %p"
     (apply 'encode-time (org-parse-time-string time-stamp))))

  (defun pc/package-delete (package)
    "Provide a way to delete packages from the CLI."
    (interactive
     (progn
       ;; Initialize the package system to get the list of package
       ;; symbols for completion.
       (package-initialize t)
       (list (intern (completing-read
                      "Delete package: "
                      (mapcar (lambda (elt) (symbol-name (car elt)))
                              package-alist)
                      nil t)))))
    (package-delete (cadr (assq package package-alist)))
    (package-initialize t))

  (defun pc/packages-install (packages)
    "Install any packages that are missing."
    (dolist (package my-packages)
      (unless (or (package-installed-p package)
                  (el-get-package-installed-p package))
        (pc/install package))))

  (defun pc/read-random-article ()
    "Jump to and open a random article.  The way the function is
          currently written requires read articles to be archived."
    (interactive)
    (save-excursion
      (save-restriction

        ;; find all articles, headline
        (org-goto-marker-or-bmk
         (org-find-exact-heading-in-directory "Articles To Read" org-directory))
        (org-narrow-to-subtree)
        (org-show-subtree)
        (org-clock-in)

        ;; jump to a random subtree
        (org-goto-first-child)
        (forward-line (random (count-lines (point) (buffer-end 1))))
        (org-back-to-heading)

        ;; open the link
        (org-next-link)
        (org-return))))

  (defun pc/remove-elc-on-save ()
    "Remove the .elc files when saving a .el file."
    (make-local-variable 'after-save-hook)
    (add-hook 'after-save-hook
              (lambda ()
                (let ((elc (concat buffer-file-name "c")))
                  (if (file-exists-p elc)
                      (delete-file elc))))))

  (defun pc/save-visible-windows ()
    "Function to save all the buffers in visible windows in the
          current frame."
    (let ((sw (selected-window)))
      (dolist (window (window-list))
        (let ((buffer (window-buffer window)))
          (when (and (buffer-modified-p buffer)
                     (buffer-file-name buffer))
            (select-window window)
            (save-buffer))))
      (select-window sw)))

  (defun pc/sort--end-record ()
    (forward-sexp))

  (defun pc/sort--goto-first-defun-in-buffer ()
    (goto-char (buffer-end -1))
    (search-forward "(defun " nil t 1)
    (beginning-of-line))

  (defun pc/sort--next-record ()
    (if (search-forward "(defun " nil t 1)
        (beginning-of-line)
      (goto-char (buffer-end 1))))

  (defun pc/sort-defuns-in-buffer ()
    "Sort all the functions defined in the buffer"
    (interactive)
    (pc/sort--goto-first-defun-in-buffer)
    (sort-subr nil 'pc/sort--next-record 'pc/sort--end-record))

  (defun pc/swap-windows ()
    "If you have 2 windows, it swaps them."
    (interactive)
    (if (/= (count-windows) 2)
        (message "You need exactly 2 windows to do this.")
      (let* ((w1 (car (window-list)))
             (w2 (cadr (window-list)))
             (b1 (window-buffer w1))
             (b2 (window-buffer w2))
             (s1 (window-start w1))
             (s2 (window-start w2)))
        (set-window-buffer w1 b2)
        (set-window-buffer w2 b1)
        (set-window-start w1 s2)
        (set-window-start w2 s1)))
    (other-window 1))

  (defun pc/turn-off-notifications ()
    "Turn gnome notifications off."
    ;; gnome notifications
    (dbus-send-signal
     :session
     "org.gnome.SessionManager"
     "/org/gnome/SessionManager/Presence"
     "org.gnome.SessionManager.Presence"
     "SetStatus" 2)
    ;; pidgin status
    (shell-command "/usr/bin/python /usr/bin/purple-remote setstatus?status=unavailable")
    ;; turn off tracking mode
    (erc-track-disable)
    ;; turn off jabber activity in mode line
    (jabber-activity-mode 0))

  (defun pc/turn-on-line-and-column-numbering ()
    (make-local-variable 'column-number-mode)
    (set (make-local-variable 'comment-auto-fill-only-comments) t)
    (auto-fill-mode t))

  (defun pc/turn-on-notifications ()
    "Turn gnome notifications back on."
    ;; gnome notifications
    (dbus-send-signal
     :session
     "org.gnome.SessionManager"
     "/org/gnome/SessionManager/Presence"
     "org.gnome.SessionManager.Presence"
     "SetStatus" 0)
    ;; pidgin status
    (shell-command "/usr/bin/python /usr/bin/purple-remote setstatus?status=available")
    ;; turn on tracking mode
    (erc-track-enable)
    ;; turn on jabber activity in mode line
    (jabber-activity-mode 1))

  (defun pc/turn-on-paredit ()
    (require 'paredit)
    (paredit-mode +1))

#+END_SRC

* General editor tweaks
#+BEGIN_SRC emacs-lisp
  ;; Allow pasting selection outside of Emacs
  (setq x-select-enable-clipboard t)

  ;; Auto refresh buffers
  (global-auto-revert-mode 1)

  ;; Also auto refresh dired, but be quiet about it
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)

  ;; Don't bind dired-jump
  (setq dired-bind-jump nil)

  ;; Write backup files to own directory
  (setq backup-directory-alist
        `(("." . ,(expand-file-name
                   (concat user-emacs-directory "backups")))))

  ;; Make backups of files, even when they're in version control
  (setq vc-make-backup-files t)

  ;; White space
  ;; Delete trailing white-spaces before saving
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; Add new line at end of file
  (setq require-final-newline t)

  ;; Fill column
  (setq-default fill-column 79)

  ;; Highlight matching paren
  (show-paren-mode 1)

  ;; Transperently open compressed files
  (auto-compression-mode t)

  ;; Save a list of recent files
  (require 'recentf)
  (setq recentf-save-file (expand-file-name "recentf" user-emacs-directory)
        recentf-max-saved-items 500
        recentf-max-menu-items 15
        recentf-auto-cleanup 'never)
  (recentf-mode 1)

  ;; Uniquify buffer names
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-strip-common-suffix nil)

  ;; Indentation
  (setq-default indent-tabs-mode nil)   ;; don't use tabs to indent
  (setq-default tab-width 8)            ;; but maintain correct appearance

  ;; find-file-at-point
  (require 'ffap)

  ;; Save locations in files
  (require 'saveplace)
  (setq-default save-place t)

  ;; Alias yes-or-no to y-or-n
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Always turn on column numbers
  (column-number-mode t)

  ;; Programming mode generic setup
  (add-hook 'prog-mode-hook 'pc/turn-on-line-and-column-numbering)
  (add-hook 'prog-mode-hook 'paredit-everywhere-mode)

  ;; Encoding
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  ;; Seed the random-number generator
  (random t)

  ;; Text mode hooks
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'text-mode-hook 'turn-on-flyspell)

  ;; Save visible buffers on focus out
  (add-hook 'focus-out-hook 'pc/save-visible-windows)

  ;; Swap windows
  (define-key global-map "\C-cs" 'pc/swap-windows)

  ;; Dictionary
  (setq dictionary-server "127.0.0.1")
  (define-key global-map "\C-cd" 'dictionary-search)

  ;; Recursive mini buffers
  ;; (setq enable-recursive-minibuffers nil)

  ;; Buffer list
  (define-key global-map "\C-x\C-b" 'ibuffer-list-buffers)

  ;; Switch buffer
  (define-key global-map "\C-xb" 'ido-switch-buffer)

  ;; Debug on error
  ;; (setq debug-on-error t)

  ;; Confirmation on exit
  (setq confirm-kill-emacs 'yes-or-no-p)

  ;; Enable pdf tools
  ;; (pdf-tools-install)

  ;; Copy the pdf region, so that it can be used in capture templates.
  (add-hook 'pdf-misc-minor-mode-hook
            (lambda ()
              (add-hook 'activate-mark-hook 'pdf-misc-copy-region nil t)))

  ;; Add ~/bin dir to path
  (setenv "PATH" (format "/home/punchagan/bin:%s" (getenv "PATH")))
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
  (require 'magit)

  ;; Global keybinding for magit status
  (bind-key "C-M-g" 'magit-status)

  ;; All dirs to search for git repos
  (setq magit-repo-dirs
        '("~/software/my-repos/" "~/software/random/" "~/.emacs.d"))

#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
  (require 'helm)
  (require 'helm-themes)

  (defun helm-mini-or-imenu (imenu?)
    (interactive "P")
    (if imenu? (helm-imenu) (helm-mini)))

  ;; Why you look so ugly, helm!
  (require 'color-theme)
  (pc/after 'helm
    (load "color")

    (set-face-attribute 'helm-selection nil
                        :background (cdr (assoc 'background-color (color-theme-get-params)))
                        :foreground (cdr (assoc 'foreground-color (color-theme-get-params))))

    (set-face-attribute 'helm-source-header nil
                        :height 1.2
                        :foreground (cdr (assoc 'cursor-color (color-theme-get-params)))
                        :background nil)
    )

  (global-set-key (kbd "C-c h") 'helm-mini-or-imenu)
  (global-set-key (kbd "M-X") 'execute-extended-command)
  (global-set-key (kbd "M-x") 'helm-M-x)

#+END_SRC

* Org-mode config
#+BEGIN_SRC emacs-lisp
  ;; (provide 'setup-load-first)
  (add-to-list 'load-path "~/.emacs.d/site-lisp/org-mode/lisp/")
  (add-to-list 'load-path "~/.emacs.d/site-lisp/org-mode/contrib/lisp/")
  (org-reload)
  (require 'org-element)

  ;; Org-directory
  (setq org-directory "~/.life-in-plain-text/")

  ;; Links
  (setq org-return-follows-link t)

  ;; Keybindings
  (global-set-key (kbd "C-c l") 'org-store-link)

  ;; Fontify code in blocks
  (setq org-src-fontify-natively t)

  ;; Tabs in src blocks are as if tabs in that mode...
  (setq org-src-tab-acts-natively t)

  ;; Org-tree-slide
  (require 'org-tree-slide)
  (global-set-key (kbd "<f8>") 'org-tree-slide-mode)

  ;; Encrypted org buffers
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)

  ;; Org todo
        ;;; Taken from http://doc.norang.ca/org-mode.html#TodoKeywords
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "|" "DONE(d)")
                (sequence "|" "CANCELLED(c@/!)"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold))))

  ;; Export
  (setq org-use-sub-superscripts '{}
        org-export-use-sub-superscripts '{})

  ;; org-file apps
  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.mm\\'" . default)
          ("\\.x?html?\\'" . default)
          ("\\.pdf\\'" . default)))

  ;; clip2org
  (require 'clip2org)
  (setq clip2org-include-date t)
  (setq clip2org-clippings-file "/media/punchagan/Kindle/documents/My Clippings.txt")
  (setq clip2org-clipping-tags ":drill:")

  ;; Buggy org-eldoc?
  (remove-hook 'org-mode-hook 'org-eldoc-load)

  ;; Buffer switching
  (setq org-completion-use-ido t)
  (bind-key "C-c b" 'org-switchb)

#+END_SRC

*** Agenda and clocking
#+BEGIN_SRC emacs-lisp
  ;; Org-agenda
  (setq org-agenda-files
        (expand-file-name "agenda-files.org" org-directory))
  (global-set-key (kbd "<f12>") 'org-agenda)

  (setq org-agenda-sticky t
        org-agenda-compact-blocks t
        org-agenda-inhibit-startup t
        org-agenda-use-tag-inheritance nil
        org-agenda-include-diary t
        org-agenda-span 'day
        org-enforce-todo-dependencies t
        org-enforce-todo-checkbox-dependencies t
        org-agenda-start-with-log-mode t
        org-agenda-skip-scheduled-if-done t
        org-clock-persist t
        org-log-into-drawer t
        org-clock-into-drawer t)

          ;;; Clocking
  (bind-keys
   :prefix "<f9>"
   :prefix-map pc/clock
   ;; except org-clock-in, everything is useful globally...
   ("i" . org-clock-in)
   ("l" . org-clock-in-last)
   ("o" . org-clock-out)
   ("x" . org-clock-cancel)
   ("j" . org-clock-goto)
   ("e" . org-set-effort))
          ;;; The keybindings are similar to what org-agenda already has. I, O, X, J, e.

          ;;; What to do with dangling clocks?
  (org-clock-persistence-insinuate)

  ;; Clocking and notifications
  (add-hook 'org-clock-in-hook 'pc/turn-off-notifications)
  (add-hook 'org-clock-out-hook 'pc/turn-on-notifications)

  ;; Appointments and notifications
  (setq
   appt-message-warning-time 10
   appt-display-mode-line t
   appt-display-format 'window
   ;; Display messages, until the actual appointment time.
   appt-display-duration (* appt-message-warning-time 60))

  (appt-activate 1) ;; active appt (appointment notification)
  (display-time)    ;; time display is required for this...? really?

  ;; Keybinding to close the appointment reminder window
  (bind-key "<f5>" '(lambda () (interactive) (appt-delete-window)))

  ;; update appt each time agenda opened
  (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)

  ;; Custom agenda command definitions
  (setq org-agenda-custom-commands
        (quote ((" " "ZTD Agenda"
                 ((agenda "" nil)
                  (tags "bigrock"
                        ((org-agenda-overriding-header "Big Rocks")
                         (org-tags-match-list-sublevels nil)
                         (org-agenda-sorting-strategy
                          '(category-keep))))
                  )))))

  ;; org-habits
  (require 'org-habit)
  (setq org-habit-graph-column 50)

  ;; org-checklist
  (require 'org-checklist)

#+END_SRC

***** make agenda the initial buffer
#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice
        (lambda ()
          (org-agenda nil " ")
          (delete-other-windows)
          (get-buffer "*Org Agenda( )*")))
#+END_SRC
*** Capture
#+BEGIN_SRC emacs-lisp
  ;; Capture related stuff
  (require 'org-capture)
  (global-set-key (kbd "C-M-r") 'org-capture)

  ;; org-protocol
  (require 'org-protocol)

  (defvar pc/org-capture-plist)

  (defun pc/howdy-capture-template ()
    (concat (format "* %s\n"
                    (or (plist-get pc/org-capture-plist :howdy-name) "%^{Name}"))
            ":PROPERTIES:\n"
            (format ":EMAIL: %s\n"
                    (or (plist-get pc/org-capture-plist :howdy-email) "%^{Email}"))
            (format ":%s: %s\n" howdy-interval-property howdy-interval-default)
            ":BIRTHDAY: %^u\n"
            ":END:\n"))

  (setq org-capture-templates
        `(
          ;; General
          ("t" "todo" entry (file+headline "todo.org" "Miscellaneous")
           "* TODO %?\n\n"
           :empty-lines 1)
          ("c" "org-protocol links under clock item" item
           (clock)
           "- [[%:link][%:description]]\n\n  %:initial"
           :immediate-finish t :empty-lines 1)

          ;; Contact
          ("C" "Contact" entry
           (file "contacts.txt")
           "%(pc/howdy-capture-template)"
           :empty-lines 0 :immediate-finish t)

          ;; Blog related
          ("b" "org-protocol bookmarks" item
           (file "bookmarks.org")
           "- [[%:link][%:description]]\n\n  %:initial"
           :empty-lines 1)
          ("q" "org-protocol quotes" item
           (file "quotes.org")
           "- %:initial"
           :empty-lines 1)

          ;; Incremental reading
          ("u"
           "Task: Read this URL"
           entry
           (file+headline "todo.org" "Articles To Read")
           "* TODO Read article: [[%:link][%:description]]\n\n  %:initial\n\n"
           :empty-lines 1
           :immediate-finish t)
          ("w"
           "Capture web snippet"
           entry
           (file+headline "notes.org" "Web notes")
           "%(concat  \"* Fact: '%:description'        :\"
                     (format \"%s\" org-drill-question-tag)
                     \":\n:PROPERTIES:\n:DATE_ADDED: %u\n:SOURCE_TITLE: %:description\n:SOURCE_URL: %:link\n:END:\n\n%x\n%?\n\n\")"
           :empty-lines 1
           )
          )
        )
#+END_SRC

*** Org date-tree refile
#+BEGIN_SRC emacs-lisp
  (require 'org-datetree)
  (defun pc/org-refile-to-datetree (journal)
    "Refile an entry to journal file's date-tree"
    (interactive "fRefile to: ")
    (let* ((journal (expand-file-name journal org-directory))
           (date-string (or (org-entry-get (point) "TIMESTAMP_IA")
                            (org-entry-get (point) "TIMESTAMP")))
           (dct (decode-time (or (and date-string (org-time-string-to-time date-string))
                                 (current-time))))
           (date (list (nth 4 dct) (nth 3 dct) (nth 5 dct))))
      (org-cut-subtree)
      (with-current-buffer (or (find-buffer-visiting journal)
                               (find-file-noselect journal))
        (org-mode)
        (save-excursion
          (org-datetree-file-entry-under (current-kill 0) date)
          (bookmark-set "org-refile-last-stored")))
      (message "Refiled to %s" journal)))

#+END_SRC
*** Org Drill
#+BEGIN_SRC emacs-lisp
  (require 'org-drill)
  (setq org-drill-maximum-items-per-session 40
        org-drill-maximum-duration 40)
#+END_SRC
***** Scope
All my drill files are listed in a separate file, and this function reads the
file and returns the list of files.  This is used to set the scope for drills.

#+BEGIN_SRC emacs-lisp
  (defun pc/get-drill-files ()
    "Get the list of drill files from drill-files.org."
    (with-temp-buffer
      (insert-file-contents (expand-file-name "drill-files.org" org-directory))
      (mapcar (lambda (s) (expand-file-name s org-directory))
              (split-string (buffer-string) nil t))))
  (setq org-drill-scope (pc/get-drill-files))

#+END_SRC
***** Hacks to capture answers
#+BEGIN_SRC emacs-lisp
  (defun pc/org-drill-presentation-prompt (old-fun &rest fmt-and-args)
    "A presentation prompt that allows capturing answers."

    (let ((cb (current-buffer))
          (heading (nth 4 (org-heading-components)))
          (entry-id (org-entry-get (point) "ID"))
          (input "")
          (split-width-threshold 9999))
      (switch-to-buffer-other-window "*org-capture-drill-answer*" t)
      (org-mode)
      (insert "# Hit C-c C-c once you are done answering!\n")
      (org-insert-heading-respect-content)
      (insert (format "Answer: %s" heading))
      (org-entry-put (point) "QUESTION_ID" entry-id)
      (goto-char (point-max))
      (insert "  ")
      (org-time-stamp-inactive '(16))
      (insert "\n\n  ")
      (while (not (and input (equal input "")))
        (ignore-errors
          (execute-kbd-macro input))
        (setq input (read-key-sequence nil)))
      (switch-to-buffer-other-window cb t)
      (apply old-fun fmt-and-args)))

  (defun pc/org-drill-reschedule (old-fun)
    "Calls the original reschedule, but also archives the answer"
    (prog1 (funcall old-fun)
      (let ((cb (current-buffer))
            (split-width-threshold 9999))
        (switch-to-buffer-other-window "*org-capture-drill-answer*" t)
        (pc/org-refile-to-datetree "drill.org_archive")
        (message (buffer-name))
        (switch-to-buffer-other-window cb t)
        (kill-buffer "*org-capture-drill-answer*"))))

  (advice-add 'org-drill-presentation-prompt :around 'pc/org-drill-presentation-prompt)
  (advice-add 'org-drill-reschedule :around 'pc/org-drill-reschedule)

#+END_SRC
*** Org Babel
***** Enable Languages
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((emacs-lisp . t)
                                 (ditaa . t)
                                 (python . t)
                                 (sh . t)))
#+END_SRC
***** sh customizations
#+BEGIN_SRC emacs-lisp
  (setq org-babel-sh-command "bash")
#+END_SRC

***** python customizations
The IPython customizations are thanks to [[https://lists.gnu.org/archive/html/emacs-orgmode/2014-03/msg00405.html][Arun Persaud]]

******* Use IPython interpreter
- Set command to IPython.
- ~--classic~ changes prompts to be classic. org-babel seems to use some kind
  of regexps to figure out what the prompt is.
#+BEGIN_SRC emacs-lisp
  (setq org-babel-python-command "ipython --no-banner --classic --no-confirm-exit")
#+END_SRC

******* Use %cpaste magic to send code
#+BEGIN_SRC emacs-lisp
  (defun pc/ipython-use-cpaste (args)
    "Add a %cpaste and '--' to the body, for IPython magic!."
    (let ((body (nth 1 args)))
      (setcar (cdr args) (format "%%cpaste -q\n%s\n--\n" body))))

  (advice-add 'org-babel-python-evaluate-session
              :filter-args 'pc/ipython-use-cpaste)
#+END_SRC

* Contact Management
*** Setup org-contacts
#+BEGIN_SRC emacs-lisp
  ;; We need to set this before we load org-contacts to disable completion
  (setq org-contacts-enable-completion nil)

  (require 'org-contacts)

  ;; Matching rule for finding headings that are contacts.
  (setq org-contacts-anniversary-property "ANNIVERSARY")

  ;; Set org-contacts-files to speed up stuff.
  (setq pc/org-contacts-file (expand-file-name "contacts.txt" org-directory))
  (setq org-contacts-files (list pc/org-contacts-file))

  ;; Using gravatar isn't fast enough
  (setq org-contacts-icon-use-gravatar nil)

  (setq org-contacts-matcher
        (mapconcat (lambda (p) (format "%s<>\"\"" p))
                   (list org-contacts-email-property
                         org-contacts-tel-property
                         org-contacts-birthday-property
                         org-contacts-anniversary-property)
                   "|"))

  (set-register ?c `(file . ,pc/org-contacts-file))
#+END_SRC

*** COMMENT Code to fix contacts file                               :ARCHIVE:
#+BEGIN_SRC emacs-lisp

  (defun pc/make-property-multi-valued (property)
    "Fix broken org subtrees with multiple property entries for
  same propterty.

  NOTE: This function assumes that there are no proper multi valued
  entries. Any such entries will be broken with spaces getting
  replaced by %20"

    (let ((values '()))
      (while (re-search-forward (format "^:%s:\s*\\([^\s]*\\)$" property) nil t)
        (add-to-list 'values (match-string-no-properties 1)))
      (when (> (length values) 1)
        (goto-char (point-min))
        (delete-matching-lines (format "::" property))
        (apply 'org-entry-put-multivalued-property (point-min) property emails))))

  (defun pc/de-duplicate-property-numbered (property)
    "Fix broken org subtrees with multiple property entries for
  same propterty by appending a number to the property name."
    (goto-char (point-min))
    (let ((count -1))
      (while (re-search-forward (format "^:\\(%s\\):\s*\\(.*\\)" property) nil t)
        (setq count (1+ count))
        (when (> count 0)
          (goto-char (match-end 1))
          (insert (format "_%s" count))))))

  (defun pc/org-contact-fix-phones ()
    "De-duplicate phone/cell/mobile properties"
    (pc/de-duplicate-property-numbered "CELL")
    (pc/de-duplicate-property-numbered "PHONE")
    (pc/de-duplicate-property-numbered "MOBILE"))

  (defun pc/org-contact-fix-nick ()
    "Prompt the user for a real-name and make title as nick, if nly firstname."
    (let ((old-name (nth 4 (org-heading-components)))
          name nick)
      (unless (or (string-match " " old-name)
                  (org-entry-properties (point) "NICK"))
        (setq name (read-string "Name: " old-name))
        (setq nick (read-string "Nick: " old-name))

        (when name
          (goto-char (point-min))
          (kill-line)
          (insert (format "* %s" name)))

        (when nick
          (org-set-property "NICK" nick)))))

  (defun pc/org-contact-fix (contact)
    (with-temp-buffer
      (org-mode)
      (insert contact)
      (pc/org-contact-fix-phones)
      (pc/make-property-multi-valued "EMAIL")
      (pc/org-contact-fix-nick)
      (org-no-properties (buffer-string))))

  (defun pc/org-contact-fix-in-buffer ()
    (let (contact)
      (org-narrow-to-subtree)
      (setq contact (pc/org-contact-fix (buffer-string)))
      (delete-region (point-min) (point-max))
      (insert contact)
      (goto-char (point-min))
      (widen)))

  ;; (org-map-entries
  ;;  'pc/org-contact-fix-in-buffer
  ;;  org-contacts-matcher
  ;;  '("~/.life-in-plain-text/contacts.txt"))


#+END_SRC
*** Howdy
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/software/my-repos/howdy/")
  (require 'howdy)
  (require 'howdy-hooks)

  (defun pc/howdy-add-contact-function (info)
    (let ((name (cdr (assoc :name info)))
          (email (cdr (assoc :email info)))
          (phone (cdr (assoc :phone info))))
      (setq pc/org-capture-plist (plist-put org-capture-plist :howdy-name name))
      (plist-put pc/org-capture-plist :howdy-email email)
      (plist-put pc/org-capture-plist :howdy-phone phone)
      (org-capture nil "C")))

  (setq howdy-add-contact-function 'pc/howdy-add-contact-function)

  (setq howdy-max-contacts 10)
#+END_SRC
***** Hook up mu4e
#+BEGIN_SRC emacs-lisp
  (advice-add 'mu4e-headers-view-message :before 'howdy-mu4e-message-receive-hook)
  ;; (add-hook 'message-send-hook 'howdy-email-message-send-hook)
#+END_SRC
***** Hook up jabber.el
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'jabber-chat-send-hooks 'howdy-jabber-message-send-hook)
  (add-hook 'jabber-message-hooks 'howdy-jabber-message-received-hook)
#+END_SRC
***** Hook up phone logs
#+BEGIN_SRC emacs-lisp
  (defun pc/howdy-phone-logs (filename)
    (let ((archive-buffer (find-file-noselect filename)))
      (with-current-buffer archive-buffer
          (while (archive-get-descr t)
            (archive-extract)
            (loop for item in (cddadr  (xml-parse-region nil nil nil t))
                  do (when (listp item)
                       (let ((phone (cdr (assoc 'Number (cadr item))))
                             (direction (cdr (assoc 'Direction (cadr item))))
                             (status (cdr (assoc 'Status (cadr item))))
                             (time (seconds-to-time
                                    (/ (string-to-number (cdr (assoc 'DateLong (cadr item)))) 1000))))
                         (when (or
                                ;; Ignore MISSED calls
                                (string= direction "INCOMING")
                                (string= direction "OUTGOING")
                                ;; Only consider incoming SMS messages
                                (string= status "-1"))
                           (howdy--contacted `((:phone . ,phone)) time)))))
            (kill-buffer)
            (switch-to-buffer archive-buffer)
            (forward-line)))
      (kill-buffer archive-buffer)))

  (run-with-timer 60
                  (* 24 60 60)
                  'pc/howdy-phone-logs
                  "~/Dropbox/Apps/BakupSMSCallLog/Backup_Archive.zip")
#+END_SRC
***** Howdy from agenda
#+BEGIN_SRC emacs-lisp
  (define-key org-agenda-mode-map "H" 'howdy-agenda-contacted)
#+END_SRC
* Language modes

*** Python mode
#+BEGIN_SRC emacs-lisp
  ;; Virtual environments
  (setq python-environment-directory "~/.virtualenvs/")

  (require 'virtualenvwrapper)
  (venv-initialize-interactive-shells) ;; if you want interactive shell support
  (venv-initialize-eshell) ;; if you want eshell support
  (setq venv-location "~/.virtualenvs")

  ;; Use hs venv by default.
  (venv-workon "hs")

  ;; Pyflakes
  (require 'flycheck-pyflakes)
  (add-hook 'python-mode-hook 'flycheck-mode)
  (add-to-list 'flycheck-disabled-checkers 'python-flake8)
  (add-to-list 'flycheck-disabled-checkers 'python-pylint)

  ;; Cython mode
  (add-to-list 'auto-mode-alist '("\\.pyx\\'" . cython-mode))
  (add-to-list 'auto-mode-alist '("\\.pxd\\'" . cython-mode))
  (add-to-list 'auto-mode-alist '("\\.pxi\\'" . cython-mode))

  ;; jedi support
  (require 'jedi)
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:complete-on-dot t)
#+END_SRC

*** Emacs Lisp mode
#+BEGIN_SRC emacs-lisp
        ;;; Lisp mode configuration

  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'pc/remove-elc-on-save)
  (add-hook 'emacs-lisp-mode-hook 'pc/turn-on-paredit)

  (define-key emacs-lisp-mode-map (kbd "C-c v") 'eval-buffer)

  ;; (provide 'setup-emacs-lisp)
  (require 'cl)
  (require 'dbus)

  (require 'server)
  (unless (server-running-p)
    (server-start))

#+END_SRC

*** Go mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook 'disable-paredit-mode)
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (yas-global-mode 1)
#+END_SRC
* Blogging
*** org2blog

#+BEGIN_SRC emacs-lisp
  ;; org2blog
  (require 'org2blog-autoloads)
  (require 'auth-source)

  (let ((credentials (auth-source-user-and-password "org2blog")))
    (setq org2blog/wp-blog-alist
          `(("lafootrix"
             :url "https://lafootrix.wordpress.com/xmlrpc.php"
             :username "punchagan"
             :default-title "Hello World"
             :default-categories ("org2blog" "emacs")
             :tags-as-categories nil)
            ("test"
             :url "https://testorg2blog.wordpress.com/xmlrpc.php"
             :username ,(car credentials)
             :password ,(cadr credentials)
             :default-title "Hello World"
             :default-categories ("org2blog" "emacs")
             :tags-as-categories nil
             :wp-code t))))

  (setq org2blog/wp-use-sourcecode-shortcode t)

#+END_SRC
*** Nikola stuff
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Blogging related functions ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (defconst pc/nikola-site
    (expand-file-name "~/software/my-repos/muse-amuse.in/")
    "Path to the default nikola site.")

  (defmacro pc/with-nikola-venv (&rest body)
    "Activate nikola venv, evaluate BODY, restore old venv."
    nil
    `(let ((old-venv venv-current-name) result)
       (venv-workon "nikola")
       (setq result (progn ,@body))
       (venv-workon old-venv)
       result))

  (defun pc/nikola--tags-get ()
    "Get the current tags in the site, given the site path."
    (let* ((nikola-site (file-name-directory
                         (directory-file-name
                          (file-name-directory
                           (or (buffer-file-name (current-buffer)) "/")))))
           tags)
      (pc/with-nikola-venv
       (setq tags (shell-command-to-string
                   (format "cd %s && nikola tags -l" nikola-site)))
       (unless (search "ERROR" tags)
         (cdr (split-string tags "\n" t "\s+"))))))

  (defun pc/nikola-deploy ()
    (interactive)
    (pc/with-nikola-venv
     (async-shell-command (format "cd %s && nikola deploy" pc/nikola-site))))

  (defun pc/nikola-new-post (title &optional content)
    (interactive "MTitle: ")
    (let* ((output (pc/with-nikola-venv
                    (shell-command-to-string
                     (format
                      "cd %s && nikola new_post -t \"%s\"&"
                      pc/nikola-site title))))
           (path (save-match-data
                   (string-match "\nPATH:\s*\\(.*\\)\n" output)
                   (match-string 1 output))))
      (find-file path)
      (when content
        (goto-char (point-min))
        (search-forward "#+END_COMMENT\n\n\n")
        (if (looking-at-p "Write your post here.")
            (org-kill-line)
          (goto-char (point-max))
          (insert "\n"))
        (insert content))))


  (defun pc/nikola-tags-insert ()
    "Insert a nikola tag at point."
    (interactive)
    (let* ((word-match (or (current-word t) ""))
           (tags (completing-read-multiple "Tag: " (pc/nikola--tags-get) nil nil word-match)))
      (when (and word-match tags)
        (delete-backward-char (length word-match)))
      (mapc (lambda (tag) (insert (format "%s, " tag))) tags)))
#+END_SRC
* ERC

*** Initial setup + miscellaneous

#+BEGIN_SRC emacs-lisp
  (require 'erc)
  (require 'erc-log)
  (require 'erc-notify)
  (require 'erc-spelling)
  (require 'erc-autoaway)
  (require 'erc-desktop-notifications)

  (require 'tls)
  (setq tls-program '("gnutls-cli --priority secure256 -p %p %h"))

  ;; Interpret mIRC-style color commands in IRC chats
  (setq erc-interpret-mirc-color t)

  (setq erc-prompt-for-password t
        erc-prompt (lambda () (concat "[" (buffer-name) "]"))
        erc-join-buffer 'bury
        erc-kill-buffer-on-part t
        erc-kill-queries-on-quit t
        erc-kill-server-buffer-on-quit t
        erc-query-display 'buffer
        erc-notifications-icon notifications-application-icon
        ;; default nick to use when one is not provided
        erc-nick "punchagan")

  ;; disable yasnippet
  (add-hook 'erc-mode-hook (lambda () (yas-minor-mode -1)))

  ;; enable spell checking
  (erc-spelling-mode 1)

  ;; autoaway setup
  (setq erc-auto-discard-away t)
  (setq erc-autoaway-idle-seconds 600)
  (setq erc-autoaway-use-emacs-idle t)

#+END_SRC

*** Channels to connect to
#+BEGIN_SRC emacs-lisp
  (setq erc-autojoin-channels-alist
        '(("freenode.net"
           "#emacs" "#org-mode" "#emacs-in" "#fossee" "#ipython"
           "#pyconindia" "##linux-india"
           "#elm" "#scikit-learn" "#scikit-image" "#nikola")))
#+END_SRC

*** Tracking
#+BEGIN_SRC emacs-lisp
  ;; track
  (erc-track-mode t)
  (setq erc-track-enable-keybindings t)
  (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                  "324" "329" "332" "333" "353" "477"))

#+END_SRC

*** Logging
#+BEGIN_SRC emacs-lisp
  ;; Logging
  (setq erc-log-channels-directory "~/.erc/logs/")
  (if (not (file-exists-p erc-log-channels-directory))
      (mkdir erc-log-channels-directory t))
  (setq erc-save-buffer-on-part t)

  (defun pc/erc-save-logs ()
    (dolist (channel erc-modified-channels-alist)
      (let ((buffer (car channel)))
        (erc-save-buffer-in-logs buffer))))

  (add-hook 'erc-track-list-changed-hook 'pc/erc-save-logs)

#+END_SRC

*** Notifications
#+BEGIN_SRC emacs-lisp
  (add-to-list 'erc-modules 'notifications)
  (erc-notifications-mode)
  (add-hook 'focus-out-hook 'erc-notifications-enable)
  (add-hook 'focus-in-hook 'erc-notifications-disable)
#+END_SRC

*** Custom commands
#+BEGIN_SRC emacs-lisp
  ;; /SLAP command
  (defun erc-cmd-SLAP (&rest nick)
    (erc-send-action
     (erc-default-target)
     (concat "slaps " (car nick) " around the solar system "
             "-- just out of spite!")))
#+END_SRC

*** Start and Stop commands
#+BEGIN_SRC emacs-lisp
  ;; start and stop commands
  (defun start-irc ()
    "Connect to IRC."
    (interactive)
    (erc :server "irc.freenode.net" :port 6667 :password (password-read "Freenode password: "))
    (erc-tls :server "kanjar.irc.slack.com" :port 6667 :password (cadr (auth-source-user-and-password "kanjar"))))


#+END_SRC
*** Ghosting

A simple command to ghost a nick.

#+BEGIN_SRC emacs-lisp
  (defun pc/erc-ghost (&optional nick)
    "Ghost the nick given, or the default erc-nick"
    (interactive)
    (let ((nick (or nick erc-nick))
          (password erc-session-password))

      (message "Ghosting nick: %s" nick)
      (erc-message "PRIVMSG" (format "NickServ GHOST %s %s" nick password))
      (erc-cmd-NICK nick)
      (erc-message "PRIVMSG" (format "NickServ identify %s %s" nick password))))
#+END_SRC
***** COMMENT Auto ghost
# FIXME: The hook messes up buffer creation for some reason... :(

The function above is useful by itself, but even more useful if used as a
function on the hook called upon *receiving a 433 server response*. But, we
cannot really ghost or change nick, before actually connecting to the
server. So, we first connect with a different nick and try ghosting, etc. If
the ghosting works, it all happens before joining any channels, so it is neat!

#+BEGIN_SRC emacs-lisp
  ;; (defun pc/erc-server-433-ghost (process response)
  ;;   (let ((nick (cadr (erc-response.command-args response))))
  ;;     (erc-nickname-in-use nick "already in use")
  ;;     (pc/erc-ghost nick)))

  ;; (add-hook 'erc-server-433-functions 'pc/erc-server-433-ghost)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (defun pc/erc-ghost-maybe (server nick)
  ;;   "Send GHOST message to NickServ if NICK ends with `erc-nick-uniquifier'.
  ;; The function is suitable for `erc-after-connect'."
  ;;   (print erc-bad-nick))

  ;; (add-hook 'erc-after-connect 'pc/erc-ghost-maybe)
#+END_SRC
* Email config
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/site-lisp/mu/mu4e/")
  (require 'mu4e)

  ;; All maildirs are here in ~/.maildirs but I just use one, as of now.
  (setq mu4e-maildir "~/.maildirs/")
  ;; Multiple accounts can be configured, later
  ;; See http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html

  ;; Path to mu binary
  (setq mu4e-mu-binary "~/bin/mu")

  ;; these paths are relative to `mu4e-maildir'
  ;; set http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html
  (setq mu4e-sent-folder   "/muse-amuse/Sent"
        mu4e-drafts-folder "/muse-amuse/Drafts"
        mu4e-trash-folder  "/muse-amuse/Trash")

  ;; a  list of user's e-mail addresses
  (setq mu4e-user-mail-address-list '("punchagan@muse-amuse.in"))

  ;; the headers to show in the headers list -- a pair of a field
  ;; and its width, with `nil' meaning 'unlimited'
  ;; (better only use that for the last field.
  ;; These are the defaults:
  (setq mu4e-headers-fields
        '( (:date          .  25)
           (:flags         .   6)
           (:from          .  22)
           (:subject       .  nil)))

  ;; program to get mail;
  (setq
   mu4e-get-mail-command "offlineimap"
   mu4e~get-mail-password-regexp "^Enter password for account '.*?': $"
   mu4e-update-interval (* 6 3600))

  ;; general emacs mail settings; used when composing e-mail
  ;; the non-mu4e-* stuff is inherited from emacs/message-mode
  (setq mu4e-reply-to-address "punchagan@muse-amuse.in"
        user-mail-address "punchagan@muse-amuse.in"
        user-full-name  "Puneeth Chaganti")

  ;; smtp mail setting
  (setq
   message-send-mail-function 'smtpmail-send-it
   smtpmail-default-smtp-server "muse-amuse.in"
   smtpmail-smtp-server "muse-amuse.in"
   smtpmail-local-domain "muse-amuse.in"
   smtpmail-smtp-service 587
   ;; if you need offline mode, set these -- and create the queue dir
   ;; with 'mu mkdir', i.e.. mu mkdir /home/user/Maildir/queue
   smtpmail-queue-mail t
   smtpmail-queue-dir (expand-file-name "queue/cur" mu4e-maildir))

  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)

  ;; Dealing with html email
  (setq mu4e-html2text-command "/home/punchagan/.cabal/bin/pandoc -r html -w plain")
  ;; view email in browser
  (add-to-list 'mu4e-view-actions
               '("ViewInBrowser" . mu4e-action-view-in-browser) t)

  ;; Add manual to info
  (add-to-list 'Info-directory-list  (file-name-directory (symbol-file 'mu4e-maildir)))

  (defun pc/update-mail-and-index ()
    "Swith to mu4e-main buffer and update mail and index."
    (interactive)
    (dolist (window (window-list))
      (let ((buffer (window-buffer window)))
        (when (string-match "mu4e-main" (buffer-name buffer))
          (select-window window))))
    (unless (string-match "mu4e-main" (buffer-name (current-buffer)))
      (mu4e)))

  ;; Global keybinding for email
  (bind-key "<XF86Calculator>" 'pc/update-mail-and-index)
  (bind-key "<Scroll_Lock>" 'pc/update-mail-and-index)

  ;; Enable org-mu4e
        ;;; org-link creation support
  (require 'org-mu4e)
        ;;; org-mode compose
  (add-hook 'mu4e-compose-mode-hook 'org-mu4e-compose-org-mode)

  ;; Disable auto signature
  (setq mu4e-compose-signature-auto-include nil)

  ;; Smart refiling
  (setq mu4e-refile-folder 'pc/mu4e-refile-messages)

  (defun pc/mu4e-refile-messages (msg)
    "Rules for smartly refiling messages."
    (let ((mailing-list (or (mu4e-message-field msg :mailing-list) "")))
      (cond

       ;; Nikola project
       ((or (string-match "nikola.getnikola.github.com" mailing-list)
            (string-match "nikola-discuss.googlegroups.com" mailing-list))
        "/muse-amuse/Nikola")

       ;; org2blog
       ((string-match "org2blog.punchagan.github.com" mailing-list)
        "/muse-amuse/org2blog")

       ;; Catch all
       (t  "/muse-amuse/INBOX"))))
#+END_SRC

*** Use org-contacts as address book
#+BEGIN_SRC emacs-lisp
  (setq mu4e-org-contacts-file "~/.life-in-plain-text/contacts.org")
  (add-to-list 'mu4e-headers-actions
    '("org-contact-add" . mu4e-action-add-org-contact) t)
  (add-to-list 'mu4e-view-actions
    '("org-contact-add" . mu4e-action-add-org-contact) t)
#+END_SRC

* Jabber
#+BEGIN_SRC emacs-lisp
  (require 'jabber)

  (setq jabber-account-list
        `(
          ;; Gmail
          (,(format "punchagan@gmail.com/Emacs-%s-Jabber-%s" emacs-version jabber-version)
           (:network-server . "talk.google.com")
           (:connection-type . starttls))

          (,(format "punchagan@muse-amuse.in/MA-Emacs-%s-Jabber-%s" emacs-version jabber-version)
           (:network-server . "muse-amuse.in")
           (:connection-type . starttls))

          ))

  ;; Alerts
  (setq jabber-alert-presence-hooks nil)
  (setq jabber-alert-message-hooks '(jabber-message-scroll jabber-message-notifications))

              ;;; Enable alerts when focussed out of  emacs
  (add-hook 'focus-out-hook
            (lambda () (add-hook 'jabber-alert-message-hooks 'jabber-message-notifications)))

              ;;; Disable alerts when focussed in emacs
  (add-hook 'focus-in-hook
            (lambda () (remove-hook 'jabber-alert-message-hooks 'jabber-message-notifications)))

  ;; History
  (setq
   jabber-history-enabled t
   jabber-use-global-history nil
   jabber-backlog-number 40
   jabber-backlog-days 30)

  ;; make URLs clickable
  (add-hook 'jabber-chat-mode-hook 'goto-address)


  ;; Jabber Message Queue stuff ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (require 'json)

  (defconst pc/jabber-message-queue-file
    (expand-file-name ".jabber-message-queue.json" user-emacs-directory)
    "The file where jabber messages are queued")

  (defun pc/jabber-add-message-to-queue (to body)
    "Queue up messages when offline, and send on connect."
    (interactive (list
                  (read-string "message: ")))
    (let* ((from (nth 0 jabber-account-history))
           (data (append
                  (or (ignore-errors (json-read-file pc/jabber-message-queue-file)) '())
                  `(((from . ,from) (to . ,to) (body . ,body))))))

      (with-temp-buffer
        (insert (json-encode data))
        (write-file pc/jabber-message-queue-file nil))))

  (defun pc/jabber-chat-buffer-send ()
    "Send the message in the chat buffer to the queue."
    (interactive)
    (let ((body (delete-and-extract-region jabber-point-insert (point-max))))
      (funcall 'pc/jabber-add-message-to-queue jabber-chatting-with body)))

  (defun pc/jabber-chat-with ()
      "Queue messages if not connected, else normal chat."
      (interactive)
      (let* ((to (completing-read
                  "chat with: "
                  ;; yes, that's right! we use mu4e contact list!
                  (mapcar (lambda (x) (plist-get x :mail)) mu4e~contact-list)))
             (from (let*
                       ((completions (mapcar
                                      (lambda (c) (nth 0 (split-string (car c) "/")))
                                      jabber-account-list))
                        (default (nth 0 completions)))
                     (completing-read
                      (concat "Select Jabber account (default " default "): ")
                      completions nil t nil 'jabber-account-history default)))
             (jids (mapcar
                     (lambda (jc) (jabber-connection-bare-jid jc))
                     jabber-connections))
             (n (position from jids :test 'string-equal)))

        (if (not (null n))
            (jabber-chat-with (nth n jabber-connections) to)
          (switch-to-buffer (jabber-chat-create-buffer nil to))
          (use-local-map (copy-keymap jabber-chat-mode-map))
          (local-set-key (kbd "RET") 'pc/jabber-chat-buffer-send))))



  (defun pc/jabber-flush-queue (jc)
    "Send all queued messages and empty queue."
    (ignore-errors
      (let ((data (or (ignore-errors (json-read-file pc/jabber-message-queue-file)) '())))
        ;; Send messages
        (mapcar
         (lambda (x) (let ((to (cdr (assoc 'to x)))
                           (body (cdr (assoc 'body x)))
                           (from (cdr (assoc 'from x))))
                       (when (string= from (jabber-connection-bare-jid jc))
                         (jabber-send-message jc to nil body "chat")
                         (message (format "Sent message to %s: %s" to body))
                         (setq data (delete x data)))))
         data)


        ;; Update queue file
        (with-temp-buffer
          (insert (json-encode data))
          (write-file pc/jabber-message-queue-file nil))

        ;; Restore keymap
        (mapcar
         (lambda (buffer)
           (with-current-buffer buffer
             (when (equal major-mode 'jabber-chat-mode)
               (local-set-key (kbd "RET") 'jabber-chat-buffer-send))))
         (buffer-list)))))

  (add-hook 'jabber-post-connect-hooks 'pc/jabber-flush-queue)

  ;; Bind key to our chat function
  (global-set-key (kbd "C-x C-j C-j") 'pc/jabber-chat-with)
#+END_SRC
* Miscellaneous stuff
*** Play music using ~mpsyt~
#+BEGIN_SRC emacs-lisp
  (require 'url)

  (defun pc/short-url-at-point ()
    "Gets the short url at point.

    This function is required only because
    `thing-at-point-url-at-point' ignores urls (without a scheme)
    that don't start with www."
    (let ((bounds (thing-at-point-bounds-of-url-at-point t)))
      (when (and bounds (< (car bounds) (cdr bounds)))
        (buffer-substring-no-properties (car bounds) (cdr bounds)))))

  (defun pc/mpsyt-url (url)
    (let ((buffer (current-buffer))
          (mpsyt-proc-name "*mpsyt*"))

      ;; Start a new term with *mpsyt* if there isn't one
      (unless (get-process mpsyt-proc-name)
        (when (get-buffer mpsyt-proc-name)
          (kill-buffer (get-buffer mpsyt-proc-name)))
        (ansi-term "mpsyt" "mpsyt"))

      ;; Play given url in mpsyt
      (let ((mpsyt-proc (get-process mpsyt-proc-name)))
        ;; If something is already playing, stop it and play this...
        (term-send-string mpsyt-proc "\n\n\n")
        ;; We wait for a bit, since looking for the prompt seems to fail, sometimes?
        (sleep-for 1)
        (term-send-string mpsyt-proc "\n")

        ;; Actually send the command to playurl
        (term-simple-send (get-process mpsyt-proc-name)
                          (format "playurl %s" url)))

      (switch-to-buffer buffer)))

  (defun pc/mpsyt-url-at-point ()
    "Play the URL at point using mpsyt."
    (interactive)
    (let ((url (or (url-get-url-at-point) (pc/short-url-at-point))))
      (if (not url)
          (message "No URL found")
        (message (format "Playing %s with mpsyt" url))
        (pc/mpsyt-url url))))
#+END_SRC
***** Bind it to <f8>
#+BEGIN_SRC emacs-lisp
  (bind-key "<f8>" 'pc/mpsyt-url-at-point)
#+END_SRC
