#+STARTUP: indent hidestars
* Introduction
This file contains the bulk of my emacs config.  It uses John Wiegley's
wonderful ~use-package~.  Also, this file is loaded in my ~init.el~ using
~org-babel-load-file~.
** Enable lexical binding
#+BEGIN_SRC emacs-lisp
  ;; -*- lexical-binding: t -*-
#+END_SRC
** Ensure use-package is available

Everything else tries to use ~use-package~.  So, we try to load it first.

# FIXME: Currently, it is installed using package, and we call
# ~package-initialize~.  This is not the best setup, when moving config to a
# new machine.
#+BEGIN_SRC emacs-lisp
  (require 'use-package)
#+END_SRC

*** Add a register jump to open this file quickly!
#+BEGIN_SRC emacs-lisp
  (set-register ?I '(file . "~/.emacs.d/punchagan.org"))
#+END_SRC

* Load path tweaks
Add additional paths to the load-path.  Currently site-lisp is the only place
where there is additional stuff!

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path site-lisp-dir)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Add top-level lisp directories to the load-path
  (dolist (dir (nreverse
                (list site-lisp-dir)))
    (dolist (entry (nreverse
                    (directory-files-and-attributes site-lisp-dir t "^[^.].+")))
      (add-to-list 'load-path (car entry))))
#+END_SRC

Ideally, nothing should go into the ~custom.el~ file. But, ~org-drill~ dumps in
stuff into it...

#+BEGIN_SRC emacs-lisp
  (setq custom-file
        (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file 'noerror)
#+END_SRC

* Appearance
*** Disable scroll bar, menu bar, fringes, junk...
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (scroll-bar-mode -1)
    (mouse-wheel-mode -1))

  (tool-bar-mode -1)
  (tooltip-mode -1)

  ;; No menubar
  (menu-bar-mode -1)

  ;; No blinking cursor
  (blink-cursor-mode -1)

  ;; make the fringe (gutter) smaller
  ;; the argument is a width in pixels (the default is 8)
  (if (fboundp 'fringe-mode)
      (fringe-mode 1))

  (display-time-mode 0)
#+END_SRC

*** Set frame title based on buffer name
#+BEGIN_SRC emacs-lisp
  ;; more useful frame title, that show either a file or a
  ;; buffer name (if the buffer isn't visiting a file)
  (setq frame-title-format
        '("" invocation-name " - "
          (:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))
#+END_SRC

*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package color-theme-solarized
    :load-path "site-lisp/emacs-color-theme-solarized"
    :demand t
    :config
    (progn
      (load-theme 'solarized t)
      (setq frame-background-mode 'dark)
      (load-theme 'solarized t)))
#+END_SRC
*** Nicer scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)

#+END_SRC

* Startup
*** Don't show startup screen
#+BEGIN_SRC emacs-lisp
  ;; No startup screen
  (setq inhibit-startup-screen t)
#+END_SRC
*** scratch message
Remove the default scratch buffer message.
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message ";;; scratch")
#+END_SRC
*** initial buffer
Display org-agenda when emacs starts-up!

#+BEGIN_SRC emacs-lisp
  (defun pc/display-agenda ()
    (org-agenda nil " ")
    (delete-other-windows)
    (get-buffer "*Org Agenda( )*"))

  (add-hook 'after-init-hook #'pc/display-agenda)
#+END_SRC
* Setup package.el
#+BEGIN_SRC emacs-lisp
  (require 'package)

  ;; Add repos
  (setq package-archives
        '(("gnu" . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC

* Hippie expand
Use hippie expand
#+BEGIN_SRC emacs-lisp
  (define-key global-map "\M-/" 'hippie-expand)

  (setq hippie-expand-try-functions-list
        '(try-expand-dabbrev
          try-expand-dabbrev-all-buffers
          try-expand-dabbrev-from-kill
          try-complete-file-name-partially
          try-complete-file-name
          try-expand-all-abbrevs
          try-expand-list
          try-expand-line
          try-complete-lisp-symbol-partially
          try-complete-lisp-symbol))
#+END_SRC

* My defuns
# FIXME: Move the functions to where they are used...
#+BEGIN_SRC emacs-lisp
  (defmacro pc/after (mode &rest body)
    "After MODE loads, evaluate BODY."
    (declare (indent defun))
    `(eval-after-load ,mode
       '(progn ,@body)))

  (defun pc/install (&optional package)
    (unless (ignore-errors (package-install package))
      (el-get-install package)))

  (defun pc/org-time-stamp-change-by-days (time-stamp ndays)
    (format-time-string
     "<%Y-%m-%d %a>"
     (time-add
      (apply 'encode-time (org-parse-time-string time-stamp))
      (days-to-time ndays))))

  (defun pc/org-time-stamp-humanize (time-stamp)
    (format-time-string
     "%A, %e %B %Y, %I:%M %p"
     (apply 'encode-time (org-parse-time-string time-stamp))))

  (defun pc/read-random-article ()
    "Jump to and open a random article.  The way the function is
          currently written requires read articles to be archived."
    (interactive)
    (save-excursion
      (save-restriction

        ;; find all articles, headline
        (org-goto-marker-or-bmk
         (org-find-exact-heading-in-directory "Articles To Read" org-directory))
        (org-narrow-to-subtree)
        (org-show-subtree)
        (org-clock-in)

        ;; jump to a random subtree
        (org-goto-first-child)
        (forward-line (random (count-lines (point) (buffer-end 1))))
        (org-back-to-heading)

        ;; open the link
        (org-next-link)
        (org-return))))

  (defun pc/remove-elc-on-save ()
    "Remove the .elc files when saving a .el file."
    (make-local-variable 'after-save-hook)
    (add-hook 'after-save-hook
              (lambda ()
                (let ((elc (concat buffer-file-name "c")))
                  (if (file-exists-p elc)
                      (delete-file elc))))))


  (defun pc/buffer-mode (buffer-or-string)
    "Returns the major mode associated with a buffer."
    (with-current-buffer buffer-or-string
      major-mode))

  ;; List of modes where we don't want auto-save on focus out.
  (setq pc/no-save-modes '(org-journal-mode))

  (defun pc/save-visible-windows ()
    "Function to save all the buffers in visible windows in the
          current frame."
    (let ((sw (selected-window)))
      (dolist (window (window-list))
        (let ((buffer (window-buffer window)))
          (when (and (buffer-modified-p buffer)
                     (buffer-file-name buffer)
                     (not (member (pc/buffer-mode buffer) pc/no-save-modes)))
            (select-window window)
            (save-buffer))))
      (select-window sw)))

  (defun pc/single-window ()
    "Return true if there is only one window."
    (let ((window (selected-window)))
      (equalp (next-window window nil) window)))

  (defun pc/sort--end-record ()
    (forward-sexp))

  (defun pc/sort--goto-first-defun-in-buffer ()
    (goto-char (buffer-end -1))
    (search-forward "(defun " nil t 1)
    (beginning-of-line))

  (defun pc/sort--next-record ()
    (if (search-forward "(defun " nil t 1)
        (beginning-of-line)
      (goto-char (buffer-end 1))))

  (defun pc/sort-defuns-in-buffer ()
    "Sort all the functions defined in the buffer"
    (interactive)
    (pc/sort--goto-first-defun-in-buffer)
    (sort-subr nil 'pc/sort--next-record 'pc/sort--end-record))

  (defun pc/swap-windows ()
    "If you have 2 windows, it swaps them."
    (interactive)
    (if (/= (count-windows) 2)
        (message "You need exactly 2 windows to do this.")
      (let* ((w1 (car (window-list)))
             (w2 (cadr (window-list)))
             (b1 (window-buffer w1))
             (b2 (window-buffer w2))
             (s1 (window-start w1))
             (s2 (window-start w2)))
        (set-window-buffer w1 b2)
        (set-window-buffer w2 b1)
        (set-window-start w1 s2)
        (set-window-start w2 s1)))
    (other-window 1))

  (defun pc/turn-off-notifications ()
    "Turn desktop/emacs notifications off."
    (interactive)
    ;; gnome notifications
    (shell-command
     "dconf write /org/gnome/desktop/notifications/show-banners false")
    ;; jabber.el status
    (jabber-send-presence "away" "" 10)
    ;; turn off tracking mode
    (erc-track-disable)
    ;; turn off jabber activity in mode line
    (jabber-activity-mode 0)
    ;; Full screen mode for all windows
    (shell-command "~/bin/fullscreen on")
    ;; Close gmail window
    (shell-command "wmctrl -c \"punchagan@gmail.com\"")
    ;; Turn on get-shit-done mode
    (with-temp-buffer
      (cd "/sudo::/")
      (shell-command "HOME=/home/punchagan get-shit-done work")))

  (defun pc/turn-on-line-and-column-numbering ()
    (make-local-variable 'column-number-mode)
    (set (make-local-variable 'comment-auto-fill-only-comments) t)
    (auto-fill-mode t))

  (defun pc/turn-on-notifications ()
    "Turn notifications back on."
    (interactive)
    ;; gnome notifications
    (shell-command
     "dconf write /org/gnome/desktop/notifications/show-banners true")
    ;; jabber.el status
    (jabber-send-presence "" "" 10)
    ;; turn on tracking mode
    (erc-track-enable)
    ;; turn on jabber activity in mode line
    (jabber-activity-mode 1)
    ;; Fullscreen mode off for all windows
    (shell-command "~/bin/fullscreen off")
    ;; Turn off get-shit-done mode
    (with-temp-buffer
      (cd "/sudo::/")
      (shell-command "HOME=/home/punchagan get-shit-done play")))

  (defun pc/turn-on-paredit ()
    (require 'paredit)
    (paredit-mode +1)
    (diminish 'paredit-mode " ⒫"))

  (defmacro pc/run-with-timer-when-idle (secs idle-time repeat-time function &rest args)
    "Run a function on timer, but only when idle."
    `(run-with-timer
      ,secs
      ,repeat-time
      (lambda () (run-with-idle-timer ,idle-time nil ,function ,@args))))

  (defun pc/turn-on-fullscreen ()
    "Switch to fullscreen if it isn't already fullscreen.
  Intended to be used from elisp similar to something
  like `(toggle-frame-fullscreen 1)' for minor modes, etc."
    (let ((fullscreen (frame-parameter nil 'fullscreen)))
      (unless (memq fullscreen '(fullscreen fullboth))
        (toggle-frame-fullscreen))))

  (defun pc/turn-off-fullscreen ()
    "Switch out of fullscreen.
  Intended to be used from elisp similar to something
  like `(toggle-frame-fullscreen -1)' for minor modes, etc."
    (let ((fullscreen (frame-parameter nil 'fullscreen)))
      (when (memq fullscreen '(fullscreen fullboth))
        (toggle-frame-fullscreen))))

#+END_SRC

* General editor tweaks
#+BEGIN_SRC emacs-lisp
  ;; Allow pasting selection outside of Emacs
  (setq x-select-enable-clipboard t)

  ;; Auto refresh buffers
  (global-auto-revert-mode 1)

  ;; Also auto refresh dired, but be quiet about it
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)

  ;; Don't bind dired-jump
  (setq dired-bind-jump nil)

  ;; Write backup files to own directory
  (setq backup-directory-alist
        `(("." . ,(expand-file-name
                   (concat user-emacs-directory "backups")))))

  ;; Make backups of files, even when they're in version control
  (setq vc-make-backup-files t)

  ;; White space
  ;; Delete trailing white-spaces before saving
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; Add new line at end of file
  (setq require-final-newline t)

  ;; Fill column
  (setq-default fill-column 79)

  ;; Highlight matching paren
  (show-paren-mode 1)

  ;; Transperently open compressed files
  (auto-compression-mode t)

  ;; Save a list of recent files
  (require 'recentf)
  (setq recentf-save-file (expand-file-name "recentf" user-emacs-directory)
        recentf-max-saved-items 500
        recentf-max-menu-items 15
        recentf-auto-cleanup 'never)
  (recentf-mode 1)

  ;; Uniquify buffer names
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-strip-common-suffix nil)

  ;; Indentation
  (setq-default indent-tabs-mode nil)   ;; don't use tabs to indent
  (setq-default tab-width 8)            ;; but maintain correct appearance

  ;; find-file-at-point
  (require 'ffap)

  ;; Save locations in files
  (require 'saveplace)
  (setq-default save-place t)

  ;; Alias yes-or-no to y-or-n
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Always turn on column numbers
  (column-number-mode t)

  ;; Programming mode generic setup
  (add-hook 'prog-mode-hook #'pc/turn-on-line-and-column-numbering)
  (add-hook 'prog-mode-hook #'paredit-everywhere-mode)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'prog-mode-hook #'linum-mode)

  ;; Encoding
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  ;; Seed the random-number generator
  (random t)

  ;; Text mode hooks
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'text-mode-hook 'turn-on-flyspell)

  ;; Save visible buffers on focus out
  (add-hook 'focus-out-hook 'pc/save-visible-windows)

  ;; Swap windows
  (define-key global-map "\C-cs" 'pc/swap-windows)

  ;; Dictionary
  (setq dictionary-server "127.0.0.1")
  (define-key global-map "\C-cd" 'dictionary-search)

  ;; Recursive mini buffers
  ;; (setq enable-recursive-minibuffers nil)

  ;; Buffer list
  (define-key global-map "\C-x\C-b" 'ibuffer-list-buffers)

  ;; Switch buffer
  (define-key global-map "\C-xb" 'ido-switch-buffer)

  ;; Debug on error
  ;; (setq debug-on-error t)

  ;; Confirmation on exit
  (setq confirm-kill-emacs 'yes-or-no-p)

  ;; Enable pdf tools
  ;; (pdf-tools-install)

  ;; Set kill ring to be huge!
  (setq kill-ring-max 500)

  ;; Copy the pdf region, so that it can be used in capture templates.
  (add-hook 'pdf-misc-minor-mode-hook
            (lambda ()
              (add-hook 'activate-mark-hook 'pdf-misc-copy-region nil t)))

  ;; Add ~/bin dir to path
  (setenv "PATH" (format "/home/punchagan/bin:%s" (getenv "PATH")))

  ;; Disable backups for tramp files.
  (add-to-list 'backup-directory-alist
               (cons tramp-file-name-regexp nil))

  ;; Disable auto-save for tramp files (sort of)
  (setq tramp-auto-save-directory "/tmp/")

  ;; Prompt for files larger than 100MB.
  (setq large-file-warning-threshold  100000000)

  ;; Turn on tls checking
  (setq tls-checktrust t)

  ;; Set tls program
    ;;; From: https://glyph.twistedmatrix.com/2015/11/editor-malware.html
  (let ((trustfile
         (replace-regexp-in-string
          "\\\\" "/"
          (replace-regexp-in-string
           "\n" ""
           (shell-command-to-string "python -m certifi")))))
    (setq tls-program
          (list
           (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                   (if (eq window-system 'w32) ".exe" "") trustfile)))
    (setq gnutls-verify-error t)
    (setq gnutls-trustfiles (list trustfile)))

  ;; Enable fixmee mode globally
  (use-package button-lock
    :config (diminish 'button-lock-mode))

  (use-package fixmee
    :init (setq fixmee-view-listing-keystrokes '("M-g M-v")
                fixmee-goto-prevmost-urgent-keystrokes '("M-g M-F")
                fixmee-goto-nextmost-urgent-keystrokes '("M-g M-f"))
    :config (progn
              (global-fixmee-mode 1)
              (diminish 'fixmee-mode " ❗")))

  ;; Which key
  (use-package which-key
    :ensure t
    :config (progn
              (which-key-mode 1)
              (diminish 'which-key-mode " ⓚ")))

  ;; Golden Ratio
  (use-package golden-ratio
    :config (progn
              (golden-ratio-mode 1)
              (diminish 'golden-ratio-mode " φ")))

  ;; Diminish flyspell
  (use-package flyspell
    :config (diminish #'flyspell-mode " Ⓢ"))

  ;; Diminish auto-fill
  (use-package auto-fill
    :config (diminish #'auto-fill-function " Ⓕ"))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  (projectile-global-mode)
#+END_SRC
*** Mode line
#+BEGIN_SRC emacs-lisp
(setq projectile-mode-line
      '(:eval (format "[%s]" (projectile-project-name))))
#+END_SRC
*** Enable regeneration of tags
#+BEGIN_SRC emacs-lisp
  (setq projectile-enable-idle-timer t
        projectile-idle-timer-seconds 300
        tags-revert-without-query t
        tags-add-tables t)
#+END_SRC
*** Perspective + Projectile
#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :ensure t
    :config (persp-mode 1))

  (use-package persp-projectile
    :ensure t)
#+END_SRC
** Power-line
#+BEGIN_SRC emacs-lisp
  (use-package powerline)

  (use-package spaceline-config
    :init (setq
           spaceline-minor-modes-separator ""
           powerline-default-separator 'wave)
    :config (spaceline-spacemacs-theme))
#+END_SRC
** Beacon mode
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :config (progn
              (beacon-mode 1)
              (diminish #'beacon-mode " ⯐"))
    :demand t)
#+END_SRC
** Browser
#+BEGIN_SRC emacs-lisp
  ;; when in i3 xdg-open is not used by emacs
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "chromium-browser")
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t

    ;; Global keybinding for magit status
    :bind (("C-M-g" . magit-status))

    ;; All dirs to search for git repos
    :config (setq magit-repository-directories
                  '("~/software/my-repos/" "~/software/random/"
                    "~/software/akvo/"
                    "~/.emacs.d" "~/.emacs.d/site-lisp")))
#+END_SRC
** Pull requests
#+BEGIN_SRC emacs-lisp
  (use-package magit-gh-pulls
    :ensure t
    :defer
    :config (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls))
#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
  (require 'helm-config)
  (require 'helm)
  (require 'helm-themes)

  (defun helm-mini-or-imenu (imenu?)
    (interactive "P")
    (if imenu? (helm-imenu) (helm-mini)))

  ;; Why you look so ugly, helm!
  (require 'color-theme)
  (pc/after 'helm
    (load "color")

    (set-face-attribute 'helm-selection nil
                        :background (cdr (assoc 'background-color (color-theme-get-params)))
                        :foreground (cdr (assoc 'foreground-color (color-theme-get-params))))

    (set-face-attribute 'helm-source-header nil
                        :height 1.2
                        :foreground (cdr (assoc 'cursor-color (color-theme-get-params)))
                        :background nil))

  (global-set-key (kbd "C-c h") 'helm-mini-or-imenu)
  (global-set-key (kbd "M-X") 'execute-extended-command)
  (global-set-key (kbd "M-x") 'helm-M-x)

#+END_SRC

* Org-mode config
#+BEGIN_SRC emacs-lisp
  ;; (provide 'setup-load-first)
  (add-to-list 'load-path "~/.emacs.d/site-lisp/org-mode/lisp/")
  (add-to-list 'load-path "~/.emacs.d/site-lisp/org-mode/contrib/lisp/")
  (org-reload)
  (require 'org-element)

  ;; Org-directory
  (setq org-directory "~/.life-in-plain-text/")

  ;; Links
  (setq org-return-follows-link t)

  ;; Keybindings
  (global-set-key (kbd "C-c l") 'org-store-link)

  ;; Fontify code in blocks
  (setq org-src-fontify-natively t)

  ;; Tabs in src blocks are as if tabs in that mode...
  (setq org-src-tab-acts-natively t)

  ;; Org-tree-slide
  (require 'org-tree-slide)
  (global-set-key (kbd "<f7>") 'org-tree-slide-mode)

  ;; Encrypted org buffers
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)

  ;; Org todo
        ;;; Taken from http://doc.norang.ca/org-mode.html#TodoKeywords
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "|" "DONE(d)")
                (sequence "|" "CANCELLED(c@/!)"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold))))

  ;; Export
  (setq org-use-sub-superscripts '{}
        org-export-use-sub-superscripts '{})

  ;; org-file apps
  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.mm\\'" . default)
          ("\\.x?html?\\'" . default)
          ("\\.pdf\\'" . default)))

  ;; clip2org
  (require 'clip2org)
  (setq clip2org-include-date t)
  (setq clip2org-clippings-file "/media/punchagan/Kindle/documents/My Clippings.txt")
  (setq clip2org-clipping-tags ":drill:")

  ;; Buggy org-eldoc?
  (remove-hook 'org-mode-hook 'org-eldoc-load)

  ;; Buffer switching
  (setq org-completion-use-ido t)
  (bind-key "C-c b" 'org-switchb)

#+END_SRC

** Agenda and clocking
#+BEGIN_SRC emacs-lisp
  ;; Org-agenda
  (setq org-agenda-files
        (expand-file-name "agenda-files.org" org-directory))
  (global-set-key (kbd "<f12>") 'org-agenda)

  (setq org-agenda-sticky t
        org-agenda-compact-blocks t
        org-agenda-inhibit-startup t
        org-agenda-use-tag-inheritance nil
        org-agenda-include-diary t
        org-agenda-span 'day
        org-enforce-todo-dependencies t
        org-enforce-todo-checkbox-dependencies t
        org-agenda-start-with-log-mode t
        org-agenda-skip-scheduled-if-done t
        org-clock-persist t
        org-log-into-drawer t
        org-clock-into-drawer t)

  ;; Clocking
  (bind-keys
   :prefix "<f9>"
   :prefix-map pc/clock
   ;; except org-clock-in, everything is useful globally...
   ("i" . org-clock-in)
   ("l" . org-clock-in-last)
   ("o" . org-clock-out)
   ("x" . org-clock-cancel)
   ("j" . org-clock-goto)
   ("e" . org-set-effort)
   ("t" . (lambda () (interactive) (org-time-stamp-inactive '(16)))))
  ;; The keybindings are similar to what org-agenda already has. I, O, X, J, e.

  ;; What to do with dangling clocks?
  (org-clock-persistence-insinuate)

  ;; Clocking and notifications
  (add-hook 'org-clock-in-hook 'pc/turn-off-notifications)
  (add-hook 'org-clock-out-hook 'pc/turn-on-notifications)

  ;; Appointments and notifications
  (setq
   appt-message-warning-time 10
   appt-display-mode-line t
   appt-display-format 'window
   ;; Display messages, until the actual appointment time.
   appt-display-duration (* appt-message-warning-time 60))

  (appt-activate 1) ;; active appt (appointment notification)

  ;; Keybinding to close the appointment reminder window
  (bind-key "<f5>" '(lambda () (interactive) (appt-delete-window)))

  ;; update appt each time agenda opened
  (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)

  ;; Custom agenda command definitions
  (setq org-agenda-custom-commands
        (quote ((" " "ZTD Agenda"
                 ((agenda "" nil)
                  (tags "bigrock"
                        ((org-agenda-overriding-header "Big Rocks")
                         (org-tags-match-list-sublevels nil)
                         (org-agenda-sorting-strategy
                          '(category-keep)))))))))

  ;; org-habits
  (require 'org-habit)
  (setq org-habit-graph-column 50)

  ;; org-checklist
  (require 'org-checklist)

  ;; Org Agenda clockreport
  ;; Modified to show more levels
  (setq org-agenda-clockreport-parameter-plist
        '(:fileskip0 t :link t :maxlevel 4))
#+END_SRC

** Capture
#+BEGIN_SRC emacs-lisp
  ;; Capture related stuff
  (require 'org-capture)
  (global-set-key (kbd "C-M-r") 'org-capture)

  ;; org-protocol
  (require 'org-protocol)

  (defvar pc/org-capture-plist)

  (defun pc/howdy-capture-template ()
    (concat (format "* %s\n"
                    (or (plist-get pc/org-capture-plist :howdy-name) "%^{Name}"))
            ":PROPERTIES:\n"
            (format ":EMAIL: %s\n"
                    (or (plist-get pc/org-capture-plist :howdy-email) "%^{Email}"))
            (format ":PHONE: %s\n" (or (plist-get pc/org-capture-plist :howdy-phone) ""))
            (format ":%s: %s\n" howdy-interval-property howdy-interval-default)
            ":BIRTHDAY: %^u\n"
            ":END:\n"))

  (setq org-capture-templates
        `(
          ;; General
          ("t" "todo" entry (file+headline "todo.org" "Miscellaneous")
           "* TODO %?\n\n"
           :empty-lines 1)
          ("c" "org-protocol links under clock item" item
           (clock)
           "- [[%:link][%:description]]\n\n%:initial"
           :immediate-finish t :empty-lines 1)

          ;; Contact
          ("C" "Contact" entry
           (file "contacts.txt")
           "%(pc/howdy-capture-template)"
           :empty-lines 0 :immediate-finish t)

          ;; Blog related
          ("b" "org-protocol bookmarks" item
           (file "bookmarks.org")
           "- [[%:link][%:description]]\n\n%:initial"
           :empty-lines 1)
          ("q" "org-protocol quotes" item
           (file "quotes.org")
           "- %:initial"
           :empty-lines 1)

          ;; Incremental reading
          ("u"
           "Task: Read this URL"
           entry
           (file+headline "todo.org" "Articles To Read")
           "* TODO Read article: [[%:link][%:description]]\n\n%:initial\n\n"
           :empty-lines 1
           :immediate-finish t)
          ("w"
           "Capture web snippet"
           entry
           (file+headline "notes.org" "Web notes")
           "%(concat  \"* Fact: '%:description'        :\"
                     (format \"%s\" org-drill-question-tag)
                     \":\n:PROPERTIES:\n:DATE_ADDED: %u\n:SOURCE_TITLE: %:description\n:SOURCE_URL: %:link\n:END:\n\n%x\n%?\n\n\")"
           :empty-lines 1
           )

          )
        )
#+END_SRC
** Org refile targets
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 5))))
#+END_SRC

** Org date-tree refile
#+BEGIN_SRC emacs-lisp
  (require 'org-datetree)
  (defun pc/org-refile-to-datetree (journal)
    "Refile an entry to journal file's date-tree"
    (interactive "fRefile to: ")
    (let* ((journal (expand-file-name journal org-directory))
           (date-string (or (org-entry-get (point) "TIMESTAMP_IA")
                            (org-entry-get (point) "TIMESTAMP")))
           (dct (decode-time (or (and date-string (org-time-string-to-time date-string))
                                 (current-time))))
           (date (list (nth 4 dct) (nth 3 dct) (nth 5 dct))))
      (org-cut-subtree)
      (with-current-buffer (or (find-buffer-visiting journal)
                               (find-file-noselect journal))
        (org-mode)
        (save-excursion
          (org-datetree-file-entry-under (current-kill 0) date)
          (bookmark-set "org-refile-last-stored")))
      (message "Refiled to %s" journal)))

#+END_SRC
** Org Drill
#+BEGIN_SRC emacs-lisp
  (require 'org-drill)
  (setq org-drill-maximum-items-per-session 40
        org-drill-maximum-duration 40)
#+END_SRC
**** Scope
All my drill files are listed in a separate file, and this function reads the
file and returns the list of files.  This is used to set the scope for drills.

#+BEGIN_SRC emacs-lisp
  (defun pc/get-drill-files ()
    "Get the list of drill files from drill-files.org."
    (with-temp-buffer
      (insert-file-contents (expand-file-name "drill-files.org" org-directory))
      (mapcar (lambda (s) (expand-file-name s org-directory))
              (split-string (buffer-string) nil t))))
  (setq org-drill-scope (pc/get-drill-files))

#+END_SRC
**** Hacks to capture answers
#+BEGIN_SRC emacs-lisp
  (defun pc/org-drill-presentation-prompt (old-fun &rest fmt-and-args)
    "A presentation prompt that allows capturing answers."

    (let ((cb (current-buffer))
          (heading (nth 4 (org-heading-components)))
          (entry-id (org-entry-get (point) "ID"))
          (input "")
          (split-width-threshold 9999))
      (switch-to-buffer-other-window "*org-capture-drill-answer*" t)
      (org-mode)
      (insert "# Hit C-c C-c once you are done answering!\n")
      (org-insert-heading-respect-content)
      (insert (format "Answer: %s" heading))
      (org-entry-put (point) "QUESTION_ID" entry-id)
      (goto-char (point-max))
      (insert "  ")
      (org-time-stamp-inactive '(16))
      (insert "\n\n  ")
      (while (not (and input (equal input "")))
        (ignore-errors
          (execute-kbd-macro input))
        (setq input (read-key-sequence nil)))
      (switch-to-buffer-other-window cb t)
      (apply old-fun fmt-and-args)))

  (defun pc/org-drill-reschedule (old-fun)
    "Calls the original reschedule, but also archives the answer"
    (prog1 (funcall old-fun)
      (let ((cb (current-buffer))
            (split-width-threshold 9999))
        (switch-to-buffer-other-window "*org-capture-drill-answer*" t)
        (pc/org-refile-to-datetree "drill.org_archive")
        (message (buffer-name))
        (switch-to-buffer-other-window cb t)
        (kill-buffer "*org-capture-drill-answer*"))))

  (advice-add 'org-drill-presentation-prompt :around 'pc/org-drill-presentation-prompt)
  (advice-add 'org-drill-reschedule :around 'pc/org-drill-reschedule)

#+END_SRC
** Org Babel
**** Enable Languages
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((emacs-lisp . t)
                                 (ditaa . t)
                                 (python . t)
                                 (ipython . t)
                                 (sqlite . t)
                                 (sh . t)))
#+END_SRC
**** sh customizations
#+BEGIN_SRC emacs-lisp
  (setq org-babel-sh-command "bash")
#+END_SRC

**** python customizations
The IPython customizations are thanks to [[https://lists.gnu.org/archive/html/emacs-orgmode/2014-03/msg00405.html][Arun Persaud]]

****** Use IPython interpreter
- Set command to IPython.
- ~--classic~ changes prompts to be classic. org-babel seems to use some kind
  of regexps to figure out what the prompt is.
#+BEGIN_SRC emacs-lisp
  (setq org-babel-python-command "ipython --no-banner --classic --no-confirm-exit")
#+END_SRC

****** Use %cpaste magic to send code
#+BEGIN_SRC emacs-lisp
  (defun pc/ipython-use-cpaste (args)
    "Add a %cpaste and '--' to the body, for IPython magic!."
    (let ((body (nth 1 args)))
      (setcar (cdr args) (format "%%cpaste -q\n%s\n--\n" body))))

  (advice-add 'org-babel-python-evaluate-session
              :filter-args 'pc/ipython-use-cpaste)
#+END_SRC

** Org Journal
#+BEGIN_SRC emacs-lisp
  (require 'org-journal)

  ;; Set org-journal-dir inside org-directory.
  (setq org-journal-dir (expand-file-name "journal/" org-directory))

  ;; Enable encryption
  (setq org-journal-enable-encryption t)

  ;; Don't carry over any items
  (setq org-journal-carryover-items nil)

  ;; Turn off flyspell mode
  (add-hook 'org-journal-mode-hook (lambda () (flyspell-mode -1)))

  ;; Turn off auto-save-mode
  (add-hook 'org-journal-mode-hook (lambda () (auto-save-mode -1)))

  ;; Turn on draft mode
  (add-hook 'org-journal-mode-hook (lambda () (draft-mode 1)))

  ;; Turn on full screen mode
  (add-hook 'org-journal-mode-hook #'pc/turn-on-fullscreen)

  ;; Delete other windows
  (add-hook 'org-journal-mode-hook #'delete-other-windows)

  ;; and run org-wc-display on a timer every time I go idle for 5 seconds
  (defun pc/display-org-wc-in-buffer ()
    "Calls org-wc-display in the buffer if timer is set."
    (when (timerp pc/org-wc-display-timer)
      (call-interactively 'org-wc-display)))

  (defun pc/setup-org-wc-display-timer ()
    "Function to setup a buffer local timer."
    (interactive)

    (defvar pc/org-wc-display-timer nil
      "Buffer-local timer.")

    (let ((buffer (current-buffer)))
      (setq pc/org-wc-display-timer
            (run-with-idle-timer 2 t 'pc/display-org-wc-in-buffer))))

  (defun pc/cancel-org-wc-display-timer ()
    "Cancel the timer once we are done."
    (interactive)
    (when (timerp pc/org-wc-display-timer)
      (cancel-timer pc/org-wc-display-timer)))

  ;; (advice-add 'org-journal-decrypt :after 'pc/setup-org-wc-display-timer)

#+END_SRC

** Org Caldav
Connect to the caldav server setup on muse-amuse and setup sync jobs.

** Daily list
#+BEGIN_SRC emacs-lisp
  (defun pc/show-daily-list (&optional clear)
    "Show the daily list."
    (interactive "p")
    (when (or (called-interactively-p) (not (pc/single-window)))
      (let ((id "c1308beb-816a-45d5-b9e7-899cdcff0aef"))
        (other-window 1)
        (org-id-goto id)
        (widen)
        (when (equal clear 4)
          (org-reset-checkbox-state-subtree))
        (org-narrow-to-subtree)
        (org-show-entry)
        (other-window -1))))
#+END_SRC
** Poporg
Use org-mode in comments everywhere!
#+BEGIN_SRC emacs-lisp
  (use-package poporg
    :ensure t
    :bind (("C-c \"" . poporg-dwim)))
#+END_SRC
** Export backends
*** Org Reveal
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :pin manual
    :load-path "~/.emacs.d/site-lisp/org-reveal/"
    :defer 5
    :ensure t)
#+END_SRC
*** Markdown
#+BEGIN_SRC emacs-lisp
  (require 'ox-md)
#+END_SRC
** Org gcal
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/site-lisp/org-gcal/")
  (require 'org-gcal)
  (setq org-gcal-client-id (car (auth-source-user-and-password "infilect-gcal"))
        org-gcal-client-secret (cadr (auth-source-user-and-password "infilect-gcal"))
        org-gcal-file-alist `(("puneeth@infilect.com" . ,(expand-file-name "infilect-cal.org" org-directory))))
#+END_SRC

* Contact Management
*** Howdy
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/software/my-repos/howdy/")
  (require 'howdy)
  (require 'howdy-hooks)

  (defun pc/howdy-add-contact-function (info)
    (let ((name (cdr (assoc :name info)))
          (email (cdr (assoc :email info)))
          (phone (cdr (assoc :phone info))))
      (when name
        (setq pc/org-capture-plist (plist-put org-capture-plist :howdy-name name))
        (plist-put pc/org-capture-plist :howdy-email email)
        (plist-put pc/org-capture-plist :howdy-phone phone)
        (org-capture nil "C"))))

  (setq howdy-add-contact-function 'pc/howdy-add-contact-function)

  (setq howdy-max-contacts 5)

  (setq howdy-interval-default 30)

  (setq howdy-email-function #'mu4e~compose-mail)

  (setq howdy-jabber-domains '("gmail.com"))
#+END_SRC
***** Hook up mu4e
#+BEGIN_SRC emacs-lisp
  (advice-add 'mu4e-headers-view-message :before 'howdy-mu4e-message-receive-hook)
  ;; (add-hook 'message-send-hook 'howdy-email-message-send-hook)
#+END_SRC
***** Hook up jabber.el
#+BEGIN_SRC emacs-lisp
  (add-hook 'jabber-message-hooks 'howdy-jabber-message-received-hook)
#+END_SRC
***** Hook up phone logs
#+BEGIN_SRC emacs-lisp
  (defun pc/howdy-phone-set-last-updated (time)
    (let ((filename "~/.emacs.d/.phone"))
      (with-temp-buffer
        (insert (format-time-string "%FT%T%z" time))
        (write-file filename)
        (kill-buffer))))

  (defun pc/howdy-phone-get-last-updated ()
    (let ((filename "~/.emacs.d/.phone")
          time)
      (with-current-buffer (find-file-noselect filename)
        (setq time (string-trim (buffer-substring-no-properties
                                 (point-min) (point-max))))
        (kill-buffer))
      (parse-iso8601-time-string time)))

  (defun pc/howdy-phone-logs (filename)
    (let ((archive-buffer (find-file-noselect filename))
          (current-modified (nth 5 (file-attributes filename)))
          (last-update (pc/howdy-phone-get-last-updated)))
      (with-current-buffer archive-buffer
        (while (archive-get-descr t)
          (archive-extract)
          (loop for item in (cddadr  (xml-parse-region nil nil nil t))
                do (when (listp item)
                     (let ((name (cdr (assoc 'Name (cadr item))))
                           (phone (cdr (assoc 'Number (cadr item))))
                           (direction (cdr (assoc 'Direction (cadr item))))
                           (status (cdr (assoc 'Status (cadr item))))
                           (time (seconds-to-time
                                  (/ (string-to-number (cdr (assoc 'DateLong (cadr item)))) 1000)))
                           info)
                       (when (or
                              ;; Ignore MISSED calls
                              (string= direction "INCOMING")
                              (string= direction "OUTGOING")
                              ;; Only consider incoming SMS messages
                              (string= status "-1"))
                         (setq info `((:phone . ,phone)))
                         (when (not (string= name ""))
                           (setq info (append info `((:name . ,name)))))
                         (when (time-less-p last-update time)
                           (howdy--contacted info time))))))
          (kill-buffer)
          (switch-to-buffer archive-buffer)
          (forward-line)))
      (kill-buffer archive-buffer)
      (pc/howdy-phone-set-last-updated current-modified)))

  (pc/run-with-timer-when-idle
   60 60 (* 24 60 60) 'pc/howdy-phone-logs
   "~/Dropbox/Apps/BakupSMSCallLog/Backup_Archive.zip")
#+END_SRC
******* Setup function to be able to run manually.
#+BEGIN_SRC emacs-lisp
  (defun pc/howdy-sync-phone-logs ()
    (interactive)
    (pc/howdy-phone-logs "~/Dropbox/Apps/BakupSMSCallLog/Backup_Archive.zip"))
#+END_SRC

***** Howdy from agenda
#+BEGIN_SRC emacs-lisp
  (define-key org-agenda-mode-map "H" 'howdy-agenda-contacted)
#+END_SRC
*** Setup org-contacts
#+BEGIN_SRC emacs-lisp
  (use-package org-contacts
    :config
    ;; Matching rule for finding headings that are contacts.
    (setq org-contacts-anniversary-property "ANNIVERSARY")

    ;; Set org-contacts-files to speed up stuff.
    (setq pc/org-contacts-file (expand-file-name "contacts.txt" org-directory))
    (setq org-contacts-files (list pc/org-contacts-file))

    ;; Using gravatar isn't fast enough
    (setq org-contacts-icon-use-gravatar nil)

    ;; Which org subtrees are contacts?
    (setq org-contacts-matcher
          (mapconcat (lambda (p) (format "%s<>\"\"" p))
                     (list org-contacts-email-property
                           org-contacts-tel-property
                           org-contacts-birthday-property
                           org-contacts-anniversary-property
                           howdy-jabber-property)
                     "|"))

    ;; Jump to contacts file easily
    (set-register ?c `(file . ,pc/org-contacts-file)))

#+END_SRC
*** Show future events in today's agenda.
#+BEGIN_SRC emacs-lisp
  (require 'org-bbdb)

  (defun pc/org-bbdb-anniversaries ()
    "Override `org-bbdb-anniversaries' to work without `bbdb'."
    (append
     (org-contacts-anniversaries)
     (org-contacts-anniversaries
      org-contacts-anniversary-property
      "Anniversary: %l (%Y)")))

  ;; Redefine org-bbdb-anniversaries as a hack to be able to use
  ;; `org-bbdb-anniversaries-future'.
  (advice-add 'org-bbdb-anniversaries :override 'pc/org-bbdb-anniversaries)

  (defun org-contacts-anniversaries-future (&optional n)
    "Show future anniversaries in agenda.

    This is a hack to reuse the code in
    `org-bbdb-anniversaries-future'."

    (save-match-data
      (let ((humanize-dates
             (lambda (entry)
               (let* ((now (apply 'encode-time
                                  `(0 0 0
                                      ,(calendar-extract-day date)
                                      ,(calendar-extract-month date)
                                      ,(calendar-extract-year date)
                                      nil nil nil)))
                      (today (format-time-string "%Y-%m-%d" now))
                      (tomorrow (format-time-string
                                 "%Y-%m-%d"
                                 (time-add now (days-to-time 1))))
                      (date-string
                       (and
                        (string-match "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}" entry)
                        (match-string 0 entry)))
                      (dow (format-time-string
                            "%A"
                            (apply 'encode-time (org-parse-time-string date-string))))
                      (entry (replace-regexp-in-string today "Today" entry))
                      (entry (replace-regexp-in-string tomorrow "Tomorrow" entry)))
                 (replace-regexp-in-string date-string dow entry)))))
        (mapcar
         (lambda (d) (funcall humanize-dates d))
         (org-bbdb-anniversaries-future n)))))

#+END_SRC

*** COMMENT Code to fix contacts file                               :ARCHIVE:
#+BEGIN_SRC emacs-lisp

  (defun pc/make-property-multi-valued (property)
    "Fix broken org subtrees with multiple property entries for
  same propterty.

  NOTE: This function assumes that there are no proper multi valued
  entries. Any such entries will be broken with spaces getting
  replaced by %20"

    (let ((values '()))
      (while (re-search-forward (format "^:%s:\s*\\([^\s]*\\)$" property) nil t)
        (add-to-list 'values (match-string-no-properties 1)))
      (when (> (length values) 1)
        (goto-char (point-min))
        (delete-matching-lines (format "::" property))
        (apply 'org-entry-put-multivalued-property (point-min) property emails))))

  (defun pc/de-duplicate-property-numbered (property)
    "Fix broken org subtrees with multiple property entries for
  same propterty by appending a number to the property name."
    (goto-char (point-min))
    (let ((count -1))
      (while (re-search-forward (format "^:\\(%s\\):\s*\\(.*\\)" property) nil t)
        (setq count (1+ count))
        (when (> count 0)
          (goto-char (match-end 1))
          (insert (format "_%s" count))))))

  (defun pc/org-contact-fix-phones ()
    "De-duplicate phone/cell/mobile properties"
    (pc/de-duplicate-property-numbered "CELL")
    (pc/de-duplicate-property-numbered "PHONE")
    (pc/de-duplicate-property-numbered "MOBILE"))

  (defun pc/org-contact-fix-nick ()
    "Prompt the user for a real-name and make title as nick, if nly firstname."
    (let ((old-name (nth 4 (org-heading-components)))
          name nick)
      (unless (or (string-match " " old-name)
                  (org-entry-properties (point) "NICKNAME"))
        (setq name (read-string "Name: " old-name))
        (setq nick (read-string "Nick: " old-name))

        (when name
          (goto-char (point-min))
          (kill-line)
          (insert (format "* %s" name)))

        (when nick
          (org-set-property "NICKNAME" nick)))))

  (defun pc/org-contact-fix (contact)
    (with-temp-buffer
      (org-mode)
      (insert contact)
      (pc/org-contact-fix-phones)
      (pc/make-property-multi-valued "EMAIL")
      (pc/org-contact-fix-nick)
      (org-no-properties (buffer-string))))

  (defun pc/org-contact-fix-in-buffer ()
    (let (contact)
      (org-narrow-to-subtree)
      (setq contact (pc/org-contact-fix (buffer-string)))
      (delete-region (point-min) (point-max))
      (insert contact)
      (goto-char (point-min))
      (widen)))

  ;; (org-map-entries
  ;;  'pc/org-contact-fix-in-buffer
  ;;  org-contacts-matcher
  ;;  '("~/.life-in-plain-text/contacts.txt"))


#+END_SRC
* Language modes
** Python mode
*** Use elpy
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives
               '("elpy" . "https://jorgenschaefer.github.io/packages/"))

  (use-package elpy
    :ensure t
    :config (progn
              (setq elpy-syntax-check-command "~/bin/flake")
              (pyvenv-workon "hs")
              (pyvenv-tracking-mode)
              (elpy-enable)))

#+END_SRC

** Emacs Lisp mode
#+BEGIN_SRC emacs-lisp
        ;;; Lisp mode configuration

  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'pc/remove-elc-on-save)
  (add-hook 'emacs-lisp-mode-hook 'pc/turn-on-paredit)

  (define-key emacs-lisp-mode-map (kbd "C-c v") 'eval-buffer)

  ;; (provide 'setup-emacs-lisp)
  (require 'cl)
  (require 'dbus)

  (require 'server)
  (unless (server-running-p)
    (server-start))

#+END_SRC

*** README from elisp header
#+BEGIN_SRC emacs-lisp
  (use-package h2o
    :pin manual
    :load-path "/home/punchagan/software/my-repos/h2o/")
#+END_SRC

** Go mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook 'disable-paredit-mode)
#+END_SRC

** Lua mode
#+BEGIN_SRC emacs-lisp
  (setq lua-indent-level 2)
#+END_SRC
*** Linting
#+BEGIN_SRC emacs-lisp
  (add-hook 'lua-mode-hook 'flycheck-mode)
#+END_SRC
** Clojure!
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode-extra-font-locking)

  (use-package cider
    :ensure t
    :defer t
    :config (let ()
              (add-hook 'clojure-mode-hook 'enable-paredit-mode)
              (setq cider-prompt-for-symbol nil
                    cider-prompt-save-file-on-load 'always-save)))
#+END_SRC
** Hy lang
#+BEGIN_SRC emacs-lisp
  (use-package hy-mode
    :ensure t
    :config (add-hook 'hy-mode-hook 'enable-paredit-mode))
#+END_SRC
** jsx mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . jsx-mode))
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (yas-global-mode 1)

  ;; Diminish yasnippet
  (diminish 'yas-minor-mode " ⓨ")
#+END_SRC
* Blogging
** org2blog

#+BEGIN_SRC emacs-lisp
  (use-package org2blog
    :defer t
    :init (progn
            (require 'org2blog-autoloads))

    :config (let ((credentials (auth-source-user-and-password "org2blog")))
              (setq
               org2blog/wp-blog-alist
               `(("lafootrix"
                  :url "https://lafootrix.wordpress.com/xmlrpc.php"
                  :username "punchagan"
                  :default-title "Hello World"
                  :default-categories ("org2blog" "emacs")
                  :tags-as-categories nil)
                 ("test"
                  :url "https://testorg2blog.wordpress.com/xmlrpc.php"
                  :username ,(car credentials)
                  :password ,(cadr credentials)
                  :default-title "Hello World"
                  :default-categories ("org2blog" "emacs")
                  :tags-as-categories nil
                  :wp-code t))

               org2blog/wp-use-sourcecode-shortcode t)))
#+END_SRC
** blog-admin
#+BEGIN_SRC emacs-lisp
  (use-package blog-admin
    :pin manual
    :ensure t
    :load-path "/home/punchagan/software/random/blog-admin/"
    :bind ("C-c B" . blog-admin-start)
    :config
    (setq blog-admin-backend-path "/home/punchagan/software/my-repos/muse-amuse.in/"
          blog-admin-backend-type 'nikola
          blog-admin-backend-new-post-in-drafts t
          blog-admin-show-help nil
          blog-admin-backend-nikola-executable "/home/punchagan/.virtualenvs/nikola/bin/nikola"))
#+END_SRC
** Nikola stuff
*** Constants
#+BEGIN_SRC emacs-lisp
  (defconst pc/nikola-site
    (expand-file-name "~/software/my-repos/muse-amuse.in/")
    "Path to the default nikola site.")

  (defconst pc/reading-list
    (expand-file-name "reading-list.org"
                      (expand-file-name "pages" pc/nikola-site))
    "Path to the reading list page.")
#+END_SRC
*** Activate venv
#+BEGIN_SRC emacs-lisp
  (defmacro pc/with-nikola-venv (&rest body)
    "Activate nikola venv, evaluate BODY, restore old venv."
    nil
    `(let ((old-venv venv-current-name) result)
       (venv-workon "nikola")
       (setq result (progn ,@body))
       (venv-workon old-venv)
       result))
#+END_SRC
*** New Post helpers
#+BEGIN_SRC emacs-lisp
  (defun pc/nikola-post-subtree ()
    "Post subtree as a new post."
    (interactive)
    (save-restriction
      (save-excursion
        (let ((title (org-get-heading t t)))
          (blog-admin-backend-nikola-new-post (org-no-properties title) t)))))


  (defun pc/nikola-rename-post (title)
    "Rename a post with the given new post.

  Works only if we are currently in the buffer with the post in
  question, open."
    (interactive "MTitle: ")
    (let ((post-file (buffer-file-name))
          (buf (current-buffer)))
      (unless (string-match (format "^%s.*" pc/nikola-site) (or (buffer-file-name) ""))
        (error "Not a nikola post file."))
      (blog-admin-backend-nikola-new-post title nil post-file)
      (let ((trash-directory "/tmp"))
        (move-file-to-trash post-file)
        (kill-buffer buf))))
#+END_SRC
**** Weekly bookmarks post
#+BEGIN_SRC emacs-lisp
  (defun pc/nikola-last-week-bookmarks ()
    "Creates a new post with last week's bookmarks"
    (interactive)
    (helm-pinboard-update-async nil t)
    (let* ((is-sunday (string= "Sun" (format-time-string "%a" (current-time))))
           (start (if is-sunday "-Sun" "-2Sun"))
           (end (if is-sunday "." "-Sun"))
           (title (format "What I liked %s" (org-read-date nil nil start)))
           (posts (helm-pinboard--bookmarks-between
                   (org-read-date nil t (concat start " 00:00"))
                   (org-read-date nil t (concat end " 00:00"))
                   t)))
      (with-temp-buffer
        (org-mode)
        (org-insert-heading)
        (insert (concat title "\n\n"))
        (loop for post in (reverse posts)
              do (insert "- ")
              do (org-insert-link nil (plist-get post :url) (plist-get post :title))
              do (insert (concat "\n" (plist-get post :desc) "\n\n")))
        (pc/replace-ugly-characters)
        (fill-region (point-min) (point-max))
        (blog-admin-backend-nikola-new-post title t))))


  (defun pc/replace-ugly-characters ()
    "Replace ugly unicode characters with their ascii equivalents."
    (interactive)
    (format-replace-strings '(("\x201C" . "\"")
                              ("\x201D" . "\"")
                              ("\x2018" . "'")
                              ("\x2019" . "'")
                              ("" . "\n"))
                            nil
                            (point-min)
                            (point-max)))
#+END_SRC
*** Insert tags in post
#+BEGIN_SRC emacs-lisp
  (defun pc/nikola-tags-insert ()
    "Insert a nikola tag at point."
    (interactive)
    (let* ((word-match (or (current-word t) ""))
           (tags (completing-read-multiple "Tag: " (pc/nikola--tags-get) nil nil word-match)))
      (when (and word-match tags)
        (delete-backward-char (length word-match)))
      (mapc (lambda (tag) (insert (format "%s, " tag))) tags)))

  (defun pc/nikola--tags-get ()
    "Get the current tags in the site, given the site path."
    (let* ((nikola-site (file-name-directory
                         (directory-file-name
                          (file-name-directory
                           (or (buffer-file-name (current-buffer)) "/")))))
           tags)
      (pc/with-nikola-venv
       (setq tags (shell-command-to-string
                   (format "cd %s && nikola tags -l" nikola-site)))
       (unless (search "ERROR" tags)
         (cdr (split-string tags "\n" t "\s+"))))))

#+END_SRC
*** Reading list
#+BEGIN_SRC emacs-lisp
  ;; Jump to reading list quickly!
  (set-register ?R `(file . ,pc/reading-list))

  ;; Capture books to read, quickly!
  (add-to-list 'org-capture-templates
               `("B" "Reading list entry"
                 entry (file+headline ,pc/reading-list "Kitchen-sink")
                 ,(concat
                  "* [[%:link][%:description]] %^G\n"
                  ":PROPERTIES:\n"
                  ":SUGGESTED_BY: %?\n"
                  ":URL: %:link\n"
                  ":END:")
                 :empty-lines 1))
#+END_SRC
* Web Feeds - Elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :init (defun pc/elfeed ()
            (interactive)
            (elfeed)
            (delete-other-windows))
    :config
    (setq elfeed-use-curl t)
    (setq httpd-host "0.0.0.0")
    (elfeed-web-start)
    :bind ("C-c f" . pc/elfeed))
#+END_SRC
** elfeed-org
#+BEGIN_SRC emacs-lisp
  (setq rmh-elfeed-org-files `(,(expand-file-name "elfeed.org" org-directory)))
  (elfeed-org)
#+END_SRC
**** Capture template
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-capture-templates
               '("L" "Elfeed url" entry (file+headline "elfeed.org" "Blogs")
                 "* [[%:link][%:description]]  %^g\n\n"))
#+END_SRC
** Prettier elfeed
*** Fonts
#+BEGIN_SRC emacs-lisp
  (defface pc/elfeed-search-self-posts-face
    '((((class color) (background light)) (:foreground "#070"))
      (((class color) (background dark))  (:foreground "#0ff")))
    "Face used for my own posts.")

  (defface pc/elfeed-search-programming-face
    '((((class color) (background light)) (:foreground "#070"))
      (((class color) (background dark))  (:foreground "#f90")))
    "Face used for programming posts.")

  (defface pc/elfeed-search-emacs-face
    '((((class color) (background light)) (:foreground "#070"))
      (((class color) (background dark))  (:foreground "#90f")))
    "Face used for Emacs posts.")

  (defface pc/elfeed-search-data-face
      '((((class color) (background light)) (:foreground "#070"))
        (((class color) (background dark))  (:foreground "#FFEB3B")))
      "Face used for Data posts.")

  (add-to-list 'elfeed-search-face-alist '(self pc/elfeed-search-self-posts-face))
  (add-to-list 'elfeed-search-face-alist '(programming pc/elfeed-search-programming-face))
  (add-to-list 'elfeed-search-face-alist '(emacs pc/elfeed-search-emacs-face))
  (add-to-list 'elfeed-search-face-alist '(data pc/elfeed-search-data-face))
#+END_SRC
*** Fix width
#+BEGIN_SRC emacs-lisp
  (setq shr-width 80)
#+END_SRC
** Goodies
#+BEGIN_SRC emacs-lisp
  (require 'elfeed-goodies)
  (elfeed-goodies/setup)
  (setq elfeed-goodies/entry-pane-position 'right)

#+END_SRC
** Get content for entries with no content
#+BEGIN_SRC emacs-lisp
  (defun pc/get-url-content (url)
    "Fetches the content for a url."
    (shell-command-to-string (format "/home/punchagan/bin/get_article.py %s" url)))

  (defun pc/get-entry-content (entry &optional force)
    "Fetches content for pinboard entries that are not tweets."
    (interactive
     (let ((entry elfeed-show-entry))
       (list entry t)))

    (let ((url (elfeed-entry-link entry))
          (feed-id (elfeed-deref (elfeed-entry-feed-id entry)))
          (content (elfeed-deref (elfeed-entry-content entry))))
      (when (and (s-matches? "feeds.pinboard.in/" feed-id)
                 (not (s-matches? "twitter.com/\\|pdf$\\|png$\\|jpg$" url))
                 (or force (string-equal "" content)))
        (setq content (pc/get-url-content url))
        (setf (elfeed-entry-content entry) (elfeed-ref content)))))

  (add-hook 'elfeed-new-entry-hook #'pc/get-entry-content)
#+END_SRC
* ERC
** Initial setup + miscellaneous

#+BEGIN_SRC emacs-lisp
  (require 'erc)
  (require 'erc-log)
  (require 'erc-notify)
  (require 'erc-spelling)
  (require 'erc-autoaway)
  (require 'erc-desktop-notifications)

  (require 'tls)
  (setq tls-program '("gnutls-cli --priority secure256 -p %p %h"))

  ;; Interpret mIRC-style color commands in IRC chats
  (setq erc-interpret-mirc-color t)

  (setq erc-prompt-for-password t
        erc-prompt (lambda () (concat "[" (buffer-name) "]"))
        erc-join-buffer 'bury
        erc-kill-buffer-on-part t
        erc-kill-queries-on-quit t
        erc-kill-server-buffer-on-quit t
        erc-query-display 'buffer
        erc-notifications-icon notifications-application-icon
        ;; default nick to use when one is not provided
        erc-nick "punchagan")

  ;; disable yasnippet
  (add-hook 'erc-mode-hook (lambda () (yas-minor-mode -1)))

  ;; enable spell checking
  (erc-spelling-mode 1)

  ;; autoaway setup
  (setq erc-auto-discard-away t)
  (setq erc-autoaway-idle-seconds 600)
  (setq erc-autoaway-use-emacs-idle t)

#+END_SRC

** Channels to connect to
#+BEGIN_SRC emacs-lisp
  (setq erc-autojoin-channels-alist
        '(("freenode.net"
           "#emacs" "#org-mode" "#emacs-in"
           "#pyconindia" "##linux-india" "#fossee"
           "#ipython" "#scikit-learn" "#scikit-image" "#nikola" "#hypothesis"
           "#elm" "#hy")))
#+END_SRC

** Tracking
#+BEGIN_SRC emacs-lisp
  ;; track
  (erc-track-mode t)
  (setq erc-track-enable-keybindings t)
  (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                  "324" "329" "332" "333" "353" "477"))

#+END_SRC

** Logging
#+BEGIN_SRC emacs-lisp
  ;; Logging
  (setq erc-log-channels-directory "~/.erc/logs/")
  (if (not (file-exists-p erc-log-channels-directory))
      (mkdir erc-log-channels-directory t))
  (setq erc-save-buffer-on-part t)

  (defun pc/erc-save-logs ()
    (dolist (channel erc-modified-channels-alist)
      (let ((buffer (car channel)))
        (erc-save-buffer-in-logs buffer))))

  (add-hook 'erc-track-list-changed-hook 'pc/erc-save-logs)

#+END_SRC

** Notifications
#+BEGIN_SRC emacs-lisp
  (add-to-list 'erc-modules 'notifications)
  (erc-notifications-mode)
  (add-hook 'focus-out-hook 'erc-notifications-enable)
  (add-hook 'focus-in-hook 'erc-notifications-disable)
#+END_SRC

** Custom commands
#+BEGIN_SRC emacs-lisp
  ;; /SLAP command
  (defun erc-cmd-SLAP (&rest nick)
    (erc-send-action
     (erc-default-target)
     (concat "slaps " (car nick) " around the solar system "
             "-- just out of spite!")))
#+END_SRC

** Start and Stop commands
#+BEGIN_SRC emacs-lisp
  ;; start and stop commands
  (defun my/start-irc ()
    "Connect to IRC."
    (interactive)
    (erc
     :server "irc.freenode.net"
     :port 6667
     :password (cadr (auth-source-user-and-password "freenode"))))
#+END_SRC
** Ghosting

A simple command to ghost a nick.

#+BEGIN_SRC emacs-lisp
  (defun pc/erc-ghost (&optional nick)
    "Ghost the nick given, or the default erc-nick"
    (interactive)
    (let ((nick (or nick erc-nick))
          (password erc-session-password))

      (message "Ghosting nick: %s" nick)
      (erc-message "PRIVMSG" (format "NickServ GHOST %s %s" nick password))
      (erc-cmd-NICK nick)
      (erc-message "PRIVMSG" (format "NickServ identify %s %s" nick password))))
#+END_SRC
**** COMMENT Auto ghost
# FIXME: The hook messes up buffer creation for some reason... :(

The function above is useful by itself, but even more useful if used as a
function on the hook called upon *receiving a 433 server response*. But, we
cannot really ghost or change nick, before actually connecting to the
server. So, we first connect with a different nick and try ghosting, etc. If
the ghosting works, it all happens before joining any channels, so it is neat!

#+BEGIN_SRC emacs-lisp
  ;; (defun pc/erc-server-433-ghost (process response)
  ;;   (let ((nick (cadr (erc-response.command-args response))))
  ;;     (erc-nickname-in-use nick "already in use")
  ;;     (pc/erc-ghost nick)))

  ;; (add-hook 'erc-server-433-functions 'pc/erc-server-433-ghost)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (defun pc/erc-ghost-maybe (server nick)
  ;;   "Send GHOST message to NickServ if NICK ends with `erc-nick-uniquifier'.
  ;; The function is suitable for `erc-after-connect'."
  ;;   (print erc-bad-nick))

  ;; (add-hook 'erc-after-connect 'pc/erc-ghost-maybe)
#+END_SRC
* Email config
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/site-lisp/mu/mu4e/")
  (require 'mu4e)

  ;; All maildirs are here in ~/.maildirs but I just use one, as of now.
  (setq mu4e-maildir "~/.maildirs/")
  ;; Multiple accounts can be configured, later
  ;; See http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html

  ;; Path to mu binary
  (setq mu4e-mu-binary "~/bin/mu")

  ;; these paths are relative to `mu4e-maildir'
  ;; set http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html
  (setq mu4e-sent-folder   "/muse-amuse/Sent"
        mu4e-drafts-folder "/muse-amuse/Drafts"
        mu4e-trash-folder  "/muse-amuse/Trash")

  ;; a list of my e-mail addresses
  (setq mu4e-user-mail-address-list '("punchagan@muse-amuse.in"))

  ;; the headers to show in the headers list -- a pair of a field
  ;; and its width, with `nil' meaning 'unlimited'
  ;; (better only use that for the last field.
  ;; These are the defaults:
  (setq mu4e-headers-fields
        '( (:date          .  25)
           (:flags         .   6)
           (:from          .  22)
           (:subject       .  nil)))

  ;; program to get mail;
  (setq
   mu4e-get-mail-command "mbsync muse-amuse"
   mu4e-update-interval (* 6 3600))

  ;; general emacs mail settings; used when composing e-mail
  ;; the non-mu4e-* stuff is inherited from emacs/message-mode
  (setq mu4e-reply-to-address "punchagan@muse-amuse.in"
        user-mail-address "punchagan@muse-amuse.in"
        user-full-name  "Puneeth Chaganti")

  ;; smtp mail setting
  ;; Send mail using nullmailer.
  (setq message-send-mail-function 'message-send-mail-with-sendmail)

  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)

  ;; Dealing with html email
  (setq mu4e-html2text-command "/home/punchagan/.cabal/bin/pandoc -r html -w plain")
  ;; view email in browser
  (add-to-list 'mu4e-view-actions
               '("ViewInBrowser" . mu4e-action-view-in-browser) t)

  ;; Add manual to info
  (add-to-list 'Info-directory-list  (file-name-directory (symbol-file 'mu4e-maildir)))

  (defun pc/update-mail-and-index ()
    "Swith to mu4e-main buffer and update mail and index."
    (interactive)
    (dolist (window (window-list))
      (let ((buffer (window-buffer window)))
        (when (string-match "mu4e-main" (buffer-name buffer))
          (select-window window))))
    (unless (string-match "mu4e-main" (buffer-name (current-buffer)))
      (mu4e)))

  ;; Global keybinding for email
  (bind-key "<XF86Calculator>" 'pc/update-mail-and-index)
  (bind-key "<Scroll_Lock>" 'pc/update-mail-and-index)

  ;; Enable org-mu4e
  ;;; org-link creation support
  (require 'org-mu4e)
  ;;; org-mode compose
  (add-hook 'mu4e-compose-mode-hook 'org-mu4e-compose-org-mode)

  ;; Disable auto signature
  (setq mu4e-compose-signature-auto-include nil)

  ;; set bookmarks
  (setq mu4e-bookmarks
        '(("flag:unread AND NOT flag:trashed" "All unread messages" ?u)
          ("flag:unread AND NOT flag:trashed AND maildir:/muse-amuse/INBOX" "Inbox unread messages" ?i)
          ("date:today..now" "Today's messages" ?t)))

  ;; Run imapfilter!
  (add-hook 'mu4e-update-pre-hook 'pc/imapfilter)
  (defun pc/imapfilter ()
    (message "Running imapfilter...")
    (with-current-buffer (get-buffer-create " *imapfilter*")
      (goto-char (point-max))
      (insert "---\n")
      (call-process "imapfilter" nil (current-buffer) nil "-v"))
    (message "Running imapfilter...done"))

  ;; Show mu4e maildirs info/count
  (use-package mu4e-maildirs-extension
    :pin manual
    :load-path "~/software/random/mu4e-maildirs-extension"
    :ensure t
    :config (mu4e-maildirs-extension))

  ;; Hook up mu4e to default compose key.
  (bind-key "C-x m" 'mu4e-compose-new)
#+END_SRC
*** Use org-contacts as address book
#+BEGIN_SRC emacs-lisp
  (setq mu4e-org-contacts-file "~/.life-in-plain-text/contacts.org")
  (add-to-list 'mu4e-headers-actions
    '("org-contact-add" . mu4e-action-add-org-contact) t)
  (add-to-list 'mu4e-view-actions
    '("org-contact-add" . mu4e-action-add-org-contact) t)
#+END_SRC

* Jabber
#+BEGIN_SRC emacs-lisp
  (require 'jabber)
#+END_SRC
*** Account setup
#+BEGIN_SRC emacs-lisp
  (setq jabber-account-list
        `(
          ;; Gmail
          (,(format "punchagan@gmail.com/Emacs-%s-Jabber-%s" emacs-version jabber-version)
           (:network-server . "talk.google.com")
           (:password . ,(cadr (auth-source-user-and-password "emacs-jabber")))
           (:connection-type . starttls))
          ))
#+END_SRC
*** Appearance
#+BEGIN_SRC emacs-lisp
  ;; Don't show avatars in chat windows
  (setq jabber-chat-buffer-show-avatar nil)

  ;; Jabber roster tweaks
  (setq jabber-roster-show-title nil
        jabber-roster-show-bindings nil)

  ;; make URLs clickable
  (add-hook 'jabber-chat-mode-hook 'goto-address)
#+END_SRC

*** Alerts

**** Custom notifications
Switch to the buffer when notification is clicked.

#+BEGIN_SRC emacs-lisp
  (defun pc/jabber-message-notifications (from buffer text title)
      "Show a message through the notifications.el interface"
      (let
          ((body (or (jabber-escape-xml text) " "))
           (head (jabber-escape-xml
                  (or title
                      (or jabber-notifications-message-header " ")
                      text)))
           (avatar-hash (get (jabber-jid-symbol from) 'avatar-hash))
           (on-close (lambda (id action) (unless (or (null jabber-activity-mode)
                                                     (member buffer (mapcar #'window-buffer (window-list))))
                                           (switch-to-buffer buffer)))))
        (notifications-notify
         :title title
         :body body
         :app-icon (or (and avatar-hash (jabber-avatar-find-cached avatar-hash))
                       jabber-notifications-icon)
         :app-name jabber-notifications-app
         :category "jabber.message"
         :timeout jabber-notifications-timeout
         :on-close on-close)))
#+END_SRC

**** Setup notifications
#+BEGIN_SRC emacs-lisp
  (setq jabber-alert-presence-hooks nil)

  (setq jabber-alert-message-hooks '(jabber-message-scroll pc/jabber-message-notifications))

  ;; Enable alerts when focussed out of Emacs
  (add-hook 'focus-out-hook
            (lambda () (add-hook 'jabber-alert-message-hooks #'pc/jabber-message-notifications)))

  ;; Disable alerts when focussed in Emacs
  (add-hook 'focus-in-hook
            (lambda () (remove-hook 'jabber-alert-message-hooks #'pc/jabber-message-notifications)))

#+END_SRC

*** Auto-away
#+BEGIN_SRC emacs-lisp
(add-hook 'jabber-post-connect-hooks 'jabber-autoaway-start)
#+END_SRC
*** History
#+BEGIN_SRC emacs-lisp
  (setq
   jabber-history-enabled t
   jabber-use-global-history nil
   jabber-backlog-number 40
   jabber-backlog-days 30)
#+END_SRC

*** Jabber message queue and group chat stuff
#+BEGIN_SRC emacs-lisp
  (require 'json)

  (defconst pc/jabber-message-queue-file
    (expand-file-name ".jabber-message-queue.json" user-emacs-directory)
    "The file where jabber messages are queued")

  (defun pc/collect-jids ()
    "Return a list of jids."
    (loop for contact in (org-contacts-db)
          for contact-name = (car contact)
          for jid = (howdy--get-jabber-id contact)
          for nick = (let ((nick (assoc-string org-contacts-nickname-property (caddr contact))))
                       (if nick (format "(%s)" (cdr nick)) ""))
          if (not (null jid))
          collect `(,(format "%s%s [%s]" contact-name nick jid) . ,jid)))

  (defun pc/get-all-jids-for-tag (tag)
    (let ((contacts (howdy--get-contacts-for-tag tag)))
      (loop for contact in contacts
            for jid = (howdy--get-jabber-id contact)
            if (not (null jid))
            collect jid)))

  (defun pc/is-email-p (email)
    (save-match-data
      (string-match ".+@.+\\..+" email)))

  (defun pc/jabber--chat-with (jid-pos to &optional msg)
    (if (not (null jid-pos))
        (jabber-chat-with (nth jid-pos jabber-connections) to)
      (switch-to-buffer (jabber-chat-create-buffer nil to))
      (use-local-map (copy-keymap jabber-chat-mode-map))
      (local-set-key (kbd "RET") 'pc/jabber-chat-buffer-send))

    (when msg
      ;; Kill any partially typed messages
      (goto-char (point-max)) (insert " ")
      (beginning-of-line) (kill-line)
      ;; Send msg
      (insert msg)
      (execute-kbd-macro (kbd "RET"))
      (kill-buffer)))

  (defun pc/jabber--ping-group (emails jid-pos size msg)
    (loop for email in emails
          for x from 1 to size
          do (pc/jabber--chat-with jid-pos email msg)))

  (defun pc/jabber--format-msg (msg email)
    (let* ((contact (car (howdy--find-contacts `((:email . ,email)))))
           (name (org-no-properties (car contact)))
           (nick (cdr (assoc-string org-contacts-nickname-property (caddr contact))))
           (address (if (null nick) (car (org-split-string name)) nick)))
      (format "%s, %s"  address msg)))

  (defun pc/jabber-add-message-to-queue (to body)
    "Queue up messages when offline, and send on connect."
    (interactive (list
                  (read-string "message: ")))
    (let* ((from (nth 0 jabber-account-history))
           (data (append
                  (or (ignore-errors (json-read-file pc/jabber-message-queue-file)) '())
                  `(((from . ,from) (to . ,to) (body . ,body))))))

      (with-temp-buffer
        (insert (json-encode data))
        (write-file pc/jabber-message-queue-file nil))))

  (defun pc/jabber-chat-buffer-send ()
    "Send the message in the chat buffer to the queue."
    (interactive)
    (let ((body (delete-and-extract-region jabber-point-insert (point-max))))
      (funcall 'pc/jabber-add-message-to-queue jabber-chatting-with body)))

  (defun pc/jabber-chat-with ()
    "Queue messages if not connected, else normal chat."
    (interactive)
    (let* ((to (helm-comp-read
                "chat with: "
                ;; We find email ids from contacts.db!
                (append
                 (pc/collect-jids)
                 (mapcar (lambda (x) `(,x . ,x)) (howdy--contact-tags)))))
           (from (let*
                     ((completions (mapcar
                                    (lambda (c) (nth 0 (split-string (car c) "/")))
                                    jabber-account-list))
                      (default (nth 0 completions)))
                   (completing-read
                    (concat "Select Jabber account (default " default "): ")
                    completions nil t nil 'jabber-account-history default)))
           (jids (mapcar
                  (lambda (jc) (jabber-connection-bare-jid jc))
                  jabber-connections))
           (jid-pos (position from jids :test 'string-equal)))

      (if (pc/is-email-p to)
          (pc/jabber--chat-with jid-pos to)
        (let* ((emails (pc/get-all-jids-for-tag to))
               (msg (read-string (format "Message to send to %s: " emails)))
               (group-size 10)
               (group-count (/ (length emails) group-size))
               (time-interval 120))
          (loop for n to group-count
                do (run-with-timer (* n time-interval) nil
                                   'pc/jabber--ping-group
                                   (nthcdr (* n group-size) emails)
                                   jid-pos
                                   group-size
                                   msg))))))

  (defun pc/jabber-flush-queue (jc)
    "Send all queued messages and empty queue."
    (ignore-errors
      (let ((data (or (ignore-errors (json-read-file pc/jabber-message-queue-file)) '())))
        ;; Send messages
        (mapcar
         (lambda (x) (let ((to (cdr (assoc 'to x)))
                           (body (cdr (assoc 'body x)))
                           (from (cdr (assoc 'from x))))
                       (when (string= from (jabber-connection-bare-jid jc))
                         (jabber-send-message jc to nil body "chat")
                         (message (format "Sent message to %s: %s" to body))
                         (setq data (delete x data)))))
         data)


        ;; Update queue file
        (with-temp-buffer
          (insert (json-encode data))
          (write-file pc/jabber-message-queue-file nil))

        ;; Restore keymap
        (mapcar
         (lambda (buffer)
           (with-current-buffer buffer
             (when (equal major-mode 'jabber-chat-mode)
               (local-set-key (kbd "RET") 'jabber-chat-buffer-send))))
         (buffer-list)))))

  (add-hook 'jabber-post-connect-hooks 'pc/jabber-flush-queue)

  ;; Bind key to our chat function
  (global-set-key (kbd "C-x C-j C-j") 'pc/jabber-chat-with)
#+END_SRC
* Miscellaneous stuff
*** Play music using ~mpsyt~
#+BEGIN_SRC emacs-lisp
  (require 'url)

  (defun pc/short-url-at-point ()
    "Gets the short url at point.

        This function is required only because
        `thing-at-point-url-at-point' ignores urls (without a scheme)
        that don't start with www."
    (let ((bounds (thing-at-point-bounds-of-url-at-point t)))
      (when (and bounds (< (car bounds) (cdr bounds)))
        (buffer-substring-no-properties (car bounds) (cdr bounds)))))

  (defun pc/mpsyt-url (url)
    (let ((buffer (current-buffer))
          (mpsyt-proc-name "*mpsyt*"))

      ;; Start a new term with *mpsyt* if there isn't one
      (unless (get-process mpsyt-proc-name)
        (when (get-buffer mpsyt-proc-name)
          (kill-buffer (get-buffer mpsyt-proc-name)))
        (ansi-term "mpsyt" "mpsyt")
        (pc/mpsyt-set-keybindings))

      ;; Play given url in mpsyt
      (let ((mpsyt-proc (get-process mpsyt-proc-name)))
        ;; If something is already playing, stop it and play this...
        (term-send-string mpsyt-proc "\n\n\n")
        ;; We wait for a bit, since looking for the prompt seems to fail, sometimes?
        (sleep-for 1)
        (term-send-string mpsyt-proc "\n")

        ;; Actually send the command to playurl
        (term-simple-send (get-process mpsyt-proc-name)
                          (format "playurl %s" url)))

      (switch-to-buffer buffer)))

  (defun pc/mpsyt-url-at-point ()
    "Play the URL at point using mpsyt."
    (interactive)
    (let ((url (or (url-get-url-at-point) (pc/short-url-at-point))))
      (if (not url)
          (message "No URL found")
        (message (format "Playing %s with mpsyt" url))
        (pc/mpsyt-url url))))

  (defun pc/mpsyt-set-keybindings ()
    "Change key codes sent for gray keys."
    (use-local-map (copy-keymap term-raw-map))
    (local-set-key (kbd "<up>") (lambda () (interactive) (term-send-raw-string "\e[A")))
    (local-set-key (kbd "<down>") (lambda () (interactive) (term-send-raw-string "\e[B")))
    (local-set-key (kbd "<right>") (lambda () (interactive) (term-send-raw-string "\e[C")))
    (local-set-key (kbd "<left>") (lambda () (interactive) (term-send-raw-string "\e[D"))))
#+END_SRC
***** Bind it to <f8>
#+BEGIN_SRC emacs-lisp
  (bind-key "<f8>" 'pc/mpsyt-url-at-point)
#+END_SRC
*** Show random pragmatic tip!
Display a tip from the Pragmatic Programmer! Based on
https://github.com/sfrapoport/daily-pragmatic-tip
#+BEGIN_SRC emacs-lisp
  (defun pc/be-pragmatic ()
    "Display a tip from the Pragmatic Programmer!"
    (let* ((revert-without-query '("pragmatic.*\\.org"))
           (url "http://tinyurl.com/q4tbobl")
           (buffer (url-retrieve-synchronously url))
           n text)
      (switch-to-buffer buffer)
      (re-search-forward "^$" nil t 1)
      (forward-line)
      (delete-region (point) (point-min))
      (setq n (count-lines (point-min) (point-max)))
      (forward-line (random 70))
      (setq text (buffer-substring-no-properties
                  (line-beginning-position)
                  (line-end-position)))
      (delete-non-matching-lines text (point-min) (point-max))
      (write-file (make-temp-file "pragmatic" nil ".org"))
      (revert-buffer-with-coding-system 'utf-8-hfs-dos t)
      (fill-paragraph)
      (save-buffer)))
#+END_SRC
***** Hook it up to be called on an idle timer, every day
#+BEGIN_SRC emacs-lisp
  (pc/run-with-timer-when-idle 1 120 86400 'pc/be-pragmatic)
#+END_SRC
*** Bookmarking
#+BEGIN_SRC emacs-lisp
  (require 'helm-pinboard)
#+END_SRC
*** Chrome edit server
#+BEGIN_SRC emacs-lisp
  (edit-server-start)
#+END_SRC
